function MindModule() {
	var self = this
// Autogenerated with DRAKON Editor 1.32


function Command(type, table, id, action) {
    // item 338
    this.type = type
    this.table = table
    this.id = String(id)
    this.fields = action || {}
    this.undo = null
}

function GeoTree(nextId) {
    // item 3950
    this.nextId = nextId
    this.edges = {}
    this.nodes = {}
    this.levels = {}
}

function Level() {
    // item 4101
    this.left = 0
    this.top = 0
    this.nodes = []
    this.children = []
}

function accountForLowestAbove(pgraph, movedNodes, nodeId) {
    var delta, graph, lowestAbove, node, top
    // item 4483
    graph = pgraph.graph
    // item 4485
    node = graph.getNode(nodeId)
    top = topBorder(node) - Config.METRE
    // item 4484
    lowestAbove = findLowestEdgeAbove(
        graph,
        node
    )
    // item 4486
    if ((lowestAbove == null) || (!(lowestAbove > top))) {
        
    } else {
        // item 4492
        delta = lowestAbove - top
        // item 4493
        pgraph.moveDown(
            nodeId,
            delta,
            movedNodes
        )
    }
    // item 4494
    return node.y
}

function addRange(dst, src) {
    // item 4510001
    var _ind451 = 0;
    var _col451 = src;
    var _len451 = _col451.length;
    while (true) {
        // item 4510002
        if (_ind451 < _len451) {
            
        } else {
            break;
        }
        // item 4510004
        var item = _col451[_ind451];
        // item 453
        dst.push(item)
        // item 4510003
        _ind451++;
    }
}

function addTreeEdge(tree, isVertical, head, tail, role) {
    var edge, id
    // item 4061
    id = getNextId(tree)
    // item 4060
    edge = {
        id : id,
        isLine : true,
        isVertical : isVertical,
        head : head,
        tail : tail,
        role : role
    }
    // item 4062
    tree.edges[id] = edge
}

function addTreeHor(tree, head, tail, role) {
    // item 4063
    addTreeEdge(
        tree,
        false,
        head,
        tail,
        role
    )
}

function addTreeJunction(tree, level, x, y) {
    var node
    // item 4036
    node = {
        type : "junction",
        isLine : false,
        x : x,
        y : y,
        w : 0,
        h : 0
    }
    // item 4037
    return addTreeNode(
        tree,
        level,
        node
    )
}

function addTreeNode(tree, level, node) {
    var id
    // item 3964
    id = getNextId(tree)
    node.id = id
    // item 3963
    tree.nodes[id] = node
    level.nodes.push(id)
    // item 4038
    return id
}

function addTreeVer(tree, head, tail, role) {
    // item 4064
    addTreeEdge(
        tree,
        true,
        head,
        tail,
        role
    )
}

function bottomBorder(node) {
    // item 218
    return node.y + node.h
}

function buildEditResult(pgraph, movedNodes, commandList, id) {
    var commands, moveCommands
    // item 888
    commands = {}
    // item 885
    buildMoveCommands(
        pgraph,
        movedNodes,
        commands
    )
    // item 886
    moveCommands = Utils.objectValues(
        commands
    )
    // item 887
    addRange(
        commandList,
        moveCommands
    )
    // item 884
    return {
        commands : commandList,
        nextId : id
    }
}

function buildMoveCommands(pgraph, moved, commands) {
    // item 4140001
    var _ind414 = 0;
    var _col414 = moved;
    var _keys414 = Object.keys(_col414); 
    var _len414 = _keys414.length;
    while (true) {
        // item 4140002
        if (_ind414 < _len414) {
            
        } else {
            break;
        }
        // item 4140004
        var id = _keys414[_ind414]; var _ = _col414[id];
        // item 416
        var item = pgraph.graph.getItem(id);
        // item 419
        if (id in commands) {
            // item 422
            var fields = commands[id].fields;
            fields.x = item.x;
            fields.y = item.y;
        } else {
            // item 417
            var command = new Command(
            	"update",
            	"nodes",
            	id,
            	{
            		x: item.x,
            		y: item.y
            	}
            );
            // item 418
            commands[id] = command;
        }
        // item 4140003
        _ind414++;
    }
}

function changeHeight(pgraph, id, h, movedNodes) {
    var box, delta, dirProps, fakeSkewer, graph, node
    // item 3245
    graph = pgraph.graph
    // item 3201
    node = graph.getNode(id)
    // item 3242
    dirProps = "vertical"
    // item 3241
    fakeSkewer = {}
    fakeSkewer[id] = true
    // item 32100001
    if (h < node.h) {
        // item 3262
        delta = 0
        // item 3264
        pgraph.changeSize(
            id,
            node.w,
            h
        )
    } else {
        // item 32100002
        if (h > node.h) {
            // item 3266
            delta = h - node.h
            // item 3280
            box = Drakon.makeDownPushBox(
                node
            )
            // item 3237
            pgraph.pushObjects(
                box,
                fakeSkewer,
                delta * 2,
                dirProps,
                movedNodes
            )
            // item 3267
            pgraph.moveDownNoTeam(
                id,
                delta,
                movedNodes
            )
            // item 3268
            pgraph.changeSize(
                id,
                node.w,
                h
            )
        } else {
            // item 3225
            delta = 0
        }
    }
    // item 3209
    return node.y
}

function changeItem(render, pgraph, id, width, content, output) {
    var fields, itemChange, movedNodes, node
    // item 3385
    width = Math.max(
        width,
        Config.METRE * 2
    )
    // item 2148
    node = pgraph.graph.getNode(id)
    // item 3324
    itemChange = Drakon.changeOneItem(
        render,
        node,
        width,
        content
    )
    // item 3325
    movedNodes = {}
    fields = itemChange.fields
    // item 3323
    output.tb = itemChange.tb
    output.tb2 = itemChange.tb2
    // item 3331
    if (node.left) {
        // item 3333
        swVer(
            render,
            pgraph,
            node.id,
            fields,
            movedNodes
        )
    } else {
        // item 2158
        swHor(
            render,
            pgraph,
            node.id,
            fields,
            movedNodes
        )
    }
    // item 3316
    Drakon.addToCommands(
        pgraph,
        movedNodes,
        id,
        fields,
        output.commands
    )
}

function changeWidthBoth(pgraph, id, width, movedNodes) {
    var box, delta, dirProps, excluded, leftBox, node, rightBox
    // item 3395
    dirProps = "horizontal"
    // item 3391
    node = pgraph.graph.getNode(id)
    box = node.box
    excluded = {id:true}
    // item 3396
    delta = width - node.w
    // item 3397
    if (delta > 0) {
        // item 3401
        leftBox = Drakon.makeLeftPushBox(
            node
        )
        // item 3410
        rightBox = Drakon.makeRightPushBox(
            node
        )
        // item 3393
        pgraph.pushObjects(
            leftBox,
            excluded,
            -delta,
            dirProps,
            movedNodes
        )
        // item 3400
        pgraph.pushObjects(
            rightBox,
            excluded,
            delta,
            dirProps,
            movedNodes
        )
    }
    // item 3392
    pgraph.changeSize(
        id,
        width,
        node.h
    )
}

function changeWidthRight(pgraph, id, width, movedNodes) {
    var box, delta, dirProps, excluded, node, rightBox
    // item 3419
    dirProps = "horizontal"
    // item 3416
    node = pgraph.graph.getNode(id)
    box = node.box
    excluded = {id:true}
    // item 3420
    delta = width - node.w
    // item 3428
    if (delta == 0) {
        
    } else {
        // item 3421
        if (delta > 0) {
            // item 3426
            rightBox = Drakon.makeRightPushBox(
                node
            )
            // item 3424
            pgraph.pushObjects(
                rightBox,
                excluded,
                delta * 2,
                dirProps,
                movedNodes
            )
        }
        // item 3501
        expandMove(
            pgraph,
            movedNodes,
            node,
            width
        )
    }
}

function cleanSpaceHor(pgraph, leftSibling, newBox, lower, movedNodes) {
    var above, bottom, deltaX, deltaY, excluded, graph, leftBox, rMover, sibling, top, vMover
    // item 747
    graph = pgraph.graph
    sibling = leftSibling.node
    leftBox = leftSibling.box
    // item 748
    above = up(graph, sibling)
    // item 767
    excluded = {}
    // item 769
    excluded[above.id] = true
    excluded[sibling.id] = true
    excluded[sibling.up] = true
    // item 763
    if (lower) {
        // item 762
        top = above.y + Config.METRE
    } else {
        // item 766
        top = above.y
    }
    // item 760
    rMover = new Utils.Box(
        sibling.x - 1,
        top,
        sibling.x,
        sibling.y + sibling.h
    )
    // item 768
    deltaX = leftBox.right - sibling.x +
      Config.METRE + newBox.right
    // item 761
    pgraph.pushObjects(
        rMover,
        excluded,
        deltaX,
        "horizontal",
        movedNodes
    )
    // item 770
    vMover = new Utils.Box(
        leftBox.right + Config.METRE,
        top,
        leftBox.right + Config.METRE + newBox.right,
        top
    )
    // item 772
    bottom = above.y + Config.METRE + newBox.bottom
    // item 771
    deltaY = bottom - top
    // item 773
    pgraph.pushObjects(
        vMover,
        excluded,
        deltaY,
        "vertical",
        movedNodes
    )
}

function cleanSpaceHorLeft(pgraph, rightSibling, newBox, movedNodes) {
    var above, bottom, deltaX, deltaY, excluded, graph, leftBoundary, rMover, rightBox, sibling, startX, top, vMover
    // item 982
    graph = pgraph.graph
    sibling = rightSibling.node
    rightBox = rightSibling.box
    // item 983
    above = up(graph, sibling)
    // item 994
    excluded = {}
    // item 996
    excluded[above.id] = true
    excluded[sibling.id] = true
    excluded[sibling.up] = true
    // item 993
    top = above.y
    // item 4235
    startX = rightBox.left
    // item 987
    rMover = new Utils.Box(
        startX,
        top,
        startX,
        sibling.y + sibling.h
    )
    // item 4236
    deltaX = -Config.METRE - newBox.right
    // item 1001
    leftBoundary = startX + deltaX
    // item 988
    pgraph.pushObjects(
        rMover,
        excluded,
        deltaX,
        "horizontal",
        movedNodes
    )
    // item 997
    vMover = new Utils.Box(
        leftBoundary,
        top,
        leftBoundary + newBox.right,
        top
    )
    // item 999
    bottom = above.y + Config.METRE + newBox.bottom
    // item 998
    deltaY = bottom - top
    // item 1000
    pgraph.pushObjects(
        vMover,
        excluded,
        deltaY,
        "vertical",
        movedNodes
    )
}

function cloneME(graph, render, nextId, items) {
    var task
    // item 4288
    task = new ME()
    // item 4287
    task.graph(graph)
    task.render(render)
    task.nextId(nextId)
    task.items(items)
    // item 4289
    return task
}

function cloneNode(node, id) {
    // item 4365
    return {
        id : id,
        type : node.type,
        role : node.role,
        content : Utils.copyObject(node.content),
        x : node.x,
        y : node.y,
        w : node.w,
        h : node.h
    }
}

function copySubtree(graph, nodeId) {
    var result
    // item 3621
    result = new Utils.LogicalTree(
        nodeId
    )
    // item 3623
    copySubtreeCore(
        graph,
        nodeId,
        result
    )
    // item 3622
    return result
}

function copySubtreeCore(graph, nodeId, acc) {
    var children, isVertical, node
    // item 3535
    node = graph.getNode(nodeId)
    // item 3631
    Utils.addLogicalTreeNode(acc, node)
    // item 3537
    if (node.down) {
        // item 3561
        children = getHorChildren(
            graph,
            node
        )
        // item 3563
        isVertical = false
        // item 3614
        Utils.createLogicalTreeLinks(
            acc,
            nodeId,
            isVertical,
            children.map(getId)
        )
        // item 36080001
        var _ind3608 = 0;
        var _col3608 = children;
        var _len3608 = _col3608.length;
        while (true) {
            // item 36080002
            if (_ind3608 < _len3608) {
                
            } else {
                break;
            }
            // item 36080004
            var child = _col3608[_ind3608];
            // item 3610
            copySubtreeCore(
                graph,
                child.id,
                acc
            )
            // item 36080003
            _ind3608++;
        }
    } else {
        // item 3540
        if (isVerParent(graph, node)) {
            // item 3606
            children = getVerChildren(
                graph,
                node
            )
            // item 4180
            isVertical = true
            // item 3614
            Utils.createLogicalTreeLinks(
                acc,
                nodeId,
                isVertical,
                children.map(getId)
            )
            // item 36080001
            var _ind3608 = 0;
            var _col3608 = children;
            var _len3608 = _col3608.length;
            while (true) {
                // item 36080002
                if (_ind3608 < _len3608) {
                    
                } else {
                    break;
                }
                // item 36080004
                var child = _col3608[_ind3608];
                // item 3610
                copySubtreeCore(
                    graph,
                    child.id,
                    acc
                )
                // item 36080003
                _ind3608++;
            }
        }
    }
}

function createPhysicalGraph(items, graph, render) {
    var expands, pgraph
    // item 177
    expands = getSoftExpanders()
    // item 176
    pgraph = new PhysicalGraph(
        items,
        graph,
        render,
        expands
    )
    // item 178
    return pgraph
}

function deleteEdge(pgraph, commandList, edgeId) {
    // item 1097
    pgraph.graph.removeItem(edgeId)
    // item 1098
    pushDeleteEdge(
        commandList,
        edgeId
    )
}

function deleteHorItem(graph, item, commandList) {
    var above, edges, nodes
    // item 1410
    nodes = {}
    edges = {}
    // item 1412
    above = up(
        graph,
        item
    )
    // item 1411
    nodes[above.id] = true
    // item 1413
    graph.enumerateManhattan(
        item.id,
        nodes,
        edges
    )
    // item 1415
    delete nodes[above.id]
    // item 1414
    deleteSubgraph(
        nodes,
        edges,
        commandList
    )
}

function deleteNode(pgraph, commandList, nodeId) {
    // item 1104
    pgraph.graph.removeItem(nodeId)
    // item 1105
    pushDeleteNode(
        commandList,
        nodeId
    )
}

function deleteOldHead(commandList, oldHeadId) {
    var edge, headIsOld, idIsOld, isNewHead
    // item 4386
    headIsOld = function(command) {
        return command.fields.head == oldHeadId
    }
    // item 4385
    edge = Utils.deleteFirst(
        commandList,
        headIsOld
    )
    // item 4387
    idIsOld = function(item) {
        return item.id == oldHeadId
    }
    // item 4388
    Utils.deleteFirst(
        commandList,
        idIsOld
    )
    // item 4390
    isNewHead = function(item) {
        return item.id == edge.fields.tail
    }
    // item 4389
    return Utils.findFirst(
        commandList,
        isNewHead
    )
}

function deleteSubgraph(nodes, edges, commandList) {
    // item 4770001
    var _ind477 = 0;
    var _col477 = edges;
    var _keys477 = Object.keys(_col477); 
    var _len477 = _keys477.length;
    while (true) {
        // item 4770002
        if (_ind477 < _len477) {
            
        } else {
            break;
        }
        // item 4770004
        var edgeId = _keys477[_ind477]; var _ = _col477[edgeId];
        // item 479
        pushDeleteEdge(commandList, edgeId)
        // item 4770003
        _ind477++;
    }
    // item 4800001
    var _ind480 = 0;
    var _col480 = nodes;
    var _keys480 = Object.keys(_col480); 
    var _len480 = _keys480.length;
    while (true) {
        // item 4800002
        if (_ind480 < _len480) {
            
        } else {
            break;
        }
        // item 4800004
        var nodeId = _keys480[_ind480]; var _ = _col480[nodeId];
        // item 482
        pushDeleteNode(commandList, nodeId)
        // item 4800003
        _ind480++;
    }
}

function down(graph, node) {
    // item 30
    return graph.getNodeDownEx(node)
}

function expandMove(pgraph, movedNodes, node, width) {
    var currentWidth, delta, i, steps
    // item 3491
    delta = width - node.w
    // item 3498
    currentWidth = node.w
    // item 3483
    if (delta > 0) {
        // item 3494
        steps = Math.floor(
            delta / Config.SNAP
        )
        // item 34950001
        i = 0;
        while (true) {
            // item 34950002
            if (i < steps) {
                
            } else {
                break;
            }
            // item 3499
            currentWidth += Config.SNAP
            // item 3500
            pgraph.moveRightNoTeam(
                node.id,
                Config.SNAP,
                movedNodes
            )
            // item 3497
            pgraph.changeSize(
                node.id,
                currentWidth,
                node.h
            )
            // item 34950003
            i++;
        }
    } else {
        // item 3486
        steps = -Math.floor(
            delta / Config.SNAP
        )
        // item 34870001
        i = 0;
        while (true) {
            // item 34870002
            if (i < steps) {
                
            } else {
                break;
            }
            // item 3492
            currentWidth -= Config.SNAP
            // item 3489
            pgraph.changeSize(
                node.id,
                currentWidth,
                node.h
            )
            // item 3493
            pgraph.moveRightNoTeam(
                node.id,
                -Config.SNAP,
                movedNodes
            )
            // item 34870003
            i++;
        }
    }
}

function findCeiling(graph, node) {
    
}

function findHead(graph) {
    // item 42470001
    var _ind4247 = 0;
    var _col4247 = graph.nodes;
    var _keys4247 = Object.keys(_col4247); 
    var _len4247 = _keys4247.length;
    while (true) {
        // item 42470002
        if (_ind4247 < _len4247) {
            
        } else {
            // item 4253
            Utils.throwError(
             "Head not found");
            break;
        }
        // item 42470004
        var id = _keys4247[_ind4247]; var node = _col4247[id];
        // item 4249
        if (node.role === "header") {
            // item 4252
            return node
        }
        // item 42470003
        _ind4247++;
    }
}

function findLowestEdgeAbove(graph, startNode) {
    var bottom, box, leftJun, node, nodeAbove, sLeft, sUp, stem, stemRight, stems, upJun
    // item 4510
    if (startNode.up) {
        // item 4513
        return null
    } else {
        // item 4514
        sLeft = goLeftToEnd(graph, startNode)
        sUp = up(graph, sLeft)
        nodeAbove = goRightToEnd(graph, sUp)
        bottom = bottomBorder(nodeAbove)
        // item 4458
        stems = []
        // item 4449
        node = startNode
        while (true) {
            // item 4448
            leftJun = goLeftToEnd(graph, node)
            // item 4450
            upJun = up(graph, leftJun)
            while (true) {
                // item 4451
                if (upJun.up) {
                    
                } else {
                    break;
                }
                // item 4461
                stems.push(upJun.id)
                // item 4462
                upJun = up(graph, upJun)
            }
            // item 4454
            if (upJun.left) {
                
            } else {
                break;
            }
            // item 4459
            node = upJun
        }
        // item 44640001
        var _ind4464 = 0;
        var _col4464 = stems;
        var _len4464 = _col4464.length;
        while (true) {
            // item 44640002
            if (_ind4464 < _len4464) {
                
            } else {
                break;
            }
            // item 44640004
            var stemId = _col4464[_ind4464];
            // item 4472
            stem = graph.getNode(stemId)
            stemRight = goRightToEnd(graph, stem)
            // item 4471
            box = measureSubtree(
                graph,
                stemRight
            )
            // item 4473
            bottom = Math.max(
                bottom,
                box.bottom
            )
            // item 44640003
            _ind4464++;
        }
        // item 4474
        return bottom
    }
}

function getChildX(tree, children, ordinal) {
    var child, level, nodeId
    // item 4186
    nodeId = children[ordinal]
    // item 4187
    level = tree.levels[nodeId]
    child = tree.nodes[nodeId]
    // item 4188
    return level.left + child.x
}

function getDefaultIconType(action) {
    var ractions
    // item 4520
    ractions = {
        mih03 : true,
        mih05 : true,
        mih06 : true,
        mih061 : true,
        mih062 : true,
        mih063 : true,
        mih064 : true,
        mih01 : true,
        mih02 : true,
        mih04 : true
    }
    // item 4521
    if (action in ractions) {
        // item 4524
        return "raction"
    } else {
        // item 4525
        return "action"
    }
}

function getHorChildren(graph, parent) {
    var child, result, tj, upNode
    // item 3580
    result = []
    // item 3577
    tj = down(graph, parent)
    // item 3627
    if (tj.type == "junction") {
        // item 3576
        upNode = goLeftToEnd(graph, tj)
        while (true) {
            // item 3624
            if (upNode.down) {
                // item 3579
                child = down(graph, upNode)
                result.push(child)
            }
            // item 3578
            if (upNode.right) {
                
            } else {
                break;
            }
            // item 3584
            upNode = right(graph, upNode)
        }
    } else {
        // item 3630
        result.push(tj)
    }
    // item 3581
    return result
}

function getHorParent(graph, bridgeItemId) {
    var bridge, item
    // item 1432
    bridge = graph.getHorizontal(bridgeItemId)
    // item 14330001
    var _ind1433 = 0;
    var _col1433 = bridge;
    var _len1433 = _col1433.length;
    while (true) {
        // item 14330002
        if (_ind1433 < _len1433) {
            
        } else {
            // item 1442
            return null
        }
        // item 14330004
        var itemId = _col1433[_ind1433];
        // item 1435
        item = graph.getItem(itemId)
        // item 1436
        if ((item.isLine) || (!(item.up))) {
            
        } else {
            // item 1443
            return up(graph, item)
        }
        // item 14330003
        _ind1433++;
    }
}

function getId(item) {
    // item 3604
    return item.id
}

function getLeftMiddleIndex(children) {
    // item 4144
    return children.length / 2 - 1
}

function getMiddle(leftNode, rightNode) {
    var middle
    // item 1182
    middle = (leftNode.x + rightNode.x) / 2
    // item 1181
    return Utils.snapUp(middle)
}

function getMiddleIndex(children) {
    // item 4138
    return (children.length + 1) / 2 - 1
}

function getNextId(tree) {
    // item 3748
    var nextId = tree.nextId
    tree.nextId++
    // item 3749
    return String(nextId)
}

function getSoftExpanders() {
    var nothing
    // item 3474
    nothing = function() {return null}
    // item 3475
    return {
        horizontal : softLeft,
        vertical : nothing
    }
}

function getVerChildren(graph, parent) {
    var child, leftNode, result
    // item 3594
    result = []
    // item 3591
    leftNode = left(graph, parent)
    while (true) {
        // item 3598
        leftNode = down(graph, leftNode)
        // item 3593
        child = goRightToEnd(graph, leftNode)
        result.push(child)
        // item 3592
        if (leftNode.down) {
            
        } else {
            break;
        }
    }
    // item 3595
    return result
}

function getVerSiblings(graph, item) {
    var candidate, edge, leftmost, redge, result, vertical
    // item 3371
    leftmost = goLeftToEnd(graph, item)
    redge = graph.getEdge(leftmost.right)
    // item 3373
    result = []
    // item 3446
    if (redge.role == "link") {
        // item 3449
        result.push(item.id)
    } else {
        // item 3372
        vertical = graph.getVertical(leftmost.id)
        // item 33740001
        var _ind3374 = 0;
        var _col3374 = vertical;
        var _len3374 = _col3374.length;
        while (true) {
            // item 33740002
            if (_ind3374 < _len3374) {
                
            } else {
                break;
            }
            // item 33740004
            var itemId = _col3374[_ind3374];
            // item 3377
            item = graph.getItem(itemId)
            // item 3378
            if (item.right) {
                // item 3445
                edge = graph.getEdge(item.right)
                // item 3444
                if (edge.role == "link") {
                    
                } else {
                    // item 3381
                    candidate = goRightToEnd(graph, item)
                    // item 3382
                    if (candidate.role == "header") {
                        
                    } else {
                        // item 3383
                        result.push(candidate.id)
                    }
                }
            }
            // item 33740003
            _ind3374++;
        }
    }
    // item 3376
    return result
}

function goDownToEnd(graph, startNode) {
    // item 131
    var node = startNode
    while (true) {
        // item 128
        if (node.down) {
            
        } else {
            break;
        }
        // item 129
        node = graph.getNodeDownEx(node)
    }
    // item 132
    return node
}

function goLeftToEnd(graph, startNode) {
    // item 146
    var node = startNode
    while (true) {
        // item 117
        if (node.left) {
            
        } else {
            break;
        }
        // item 118
        node = graph.getNodeLeftEx(node)
    }
    // item 121
    return node
}

function goRightToEnd(graph, startNode) {
    // item 148
    var node = startNode
    while (true) {
        // item 139
        if (node.right) {
            
        } else {
            break;
        }
        // item 140
        node =graph.getNodeRightEx(node)
    }
    // item 143
    return node
}

function goUpToEnd(graph, startNode) {
    // item 150
    var node = startNode
    while (true) {
        // item 106
        if (node.up) {
            
        } else {
            break;
        }
        // item 107
        node = graph.getNodeUpEx(node)
    }
    // item 110
    return node
}

function insertJunction(graph, id, x, y) {
    // item 1593
    var item = {
    	id: String(id),
    	isLine: false,
    	x: x,
    	y: y,
    	w: 0,
    	h: 0,
    	type: "junction"
    };
    // item 1594
    return item
}

function isVerParent(graph, item) {
    var edge
    // item 3547
    if (item.left) {
        // item 3548
        if (item.role == "header") {
            // item 3551
            return true
        } else {
            // item 3556
            edge = graph.getEdge(item.left)
            // item 3553
            if (edge.role == "link") {
                // item 3551
                return true
            } else {
                // item 3552
                return false
            }
        }
    } else {
        // item 3552
        return false
    }
}

function isVerSibling(item) {
    // item 3360
    if ((item.left) && (!(item.role == "header"))) {
        // item 3364
        return true
    } else {
        // item 3365
        return false
    }
}

function left(graph, node) {
    // item 36
    return graph.getNodeLeftEx(node)
}

function leftBorder(node) {
    // item 200
    return node.x - node.w
}

function logicalToSubtree(logical, linkType, nextId) {
    var enforceVertical, root, rootRecord, tree
    // item 3944
    enforceVertical = (linkType == "vertical")
    // item 3951
    tree = new GeoTree(nextId)
    // item 3952
    rootRecord = logicalToTree(
        logical,
        tree,
        logical.root,
        enforceVertical
    )
    // item 4104
    root = tree.nodes[rootRecord.nodeId]
    // item 3660
    return {
        node : root,
        box : rootRecord.box,
        nextId : tree.nextId,
        nodes : tree.nodes,
        edges : tree.edges,
        levels : tree.levels,
        dockId : rootRecord.dockId
    }
}

function logicalToTree(logical, tree, nodeId, enforceVertical) {
    var level, links, startNode
    // item 3709
    startNode = Utils.copyObject(
        logical.nodes[nodeId]
    )
    // item 3712
    startNode.x = startNode.w
    startNode.y = startNode.h
    // item 4102
    level = new Level()
    // item 3717
    addTreeNode(tree, level, startNode)
    // item 3713
    level.box = makeBox(startNode)
    level.nodeId = startNode.id
    tree.levels[startNode.id] = level
    // item 3720
    links = logical.links[nodeId]
    // item 3714
    if (links) {
        // item 3721
        if ((enforceVertical) || (links.type == "vertical")) {
            // item 3936
            logicalToTreeVer(
                logical,
                tree,
                level,
                links
            )
        } else {
            // item 3937
            logicalToTreeHor(
                logical,
                tree,
                level,
                links
            )
        }
    } else {
        // item 3939
        level.dockId = startNode.id
    }
    // item 4103
    return level
}

function logicalToTreeHor(logical, tree, level, links) {
    var bottom, box, child, childBottom, children, j, junctions, left, leftIndex, leftJ, leftX, middleIndex, onlyChild, rightIndex, rightJ, rightX, startId, startNode, tj, top, x, y
    // item 4108
    children = level.children
    startId = level.nodeId
    startNode = tree.nodes[startId]
    box = level.box
    // item 3926
    if (links.children.length == 1) {
        // item 3929
        top = box.bottom + Config.METRE
    } else {
        // item 3925
        top = box.bottom + Config.METRE * 2
    }
    // item 3918
    left = box.left
    bottom = top
    // item 39130001
    var _ind3913 = 0;
    var _col3913 = links.children;
    var _len3913 = _col3913.length;
    while (true) {
        // item 39130002
        if (_ind3913 < _len3913) {
            
        } else {
            break;
        }
        // item 39130004
        var childId = _col3913[_ind3913];
        // item 3915
        child = logicalToTree(
            logical,
            tree,
            childId,
            false
        )
        // item 3916
        children.push(child.nodeId)
        // item 3930
        child.left = left
        child.top = top
        // item 3919
        left += (child.box.right + Config.METRE)
        childBottom = top + child.box.bottom
        bottom = Math.max(bottom, childBottom)
        // item 39130003
        _ind3913++;
    }
    // item 3920
    box.right = left - Config.METRE
    box.bottom = bottom
    // item 4122
    if (children.length == 1) {
        // item 4128
        onlyChild = tree.nodes[children[0]]
        // item 4129
        startNode.x = onlyChild.x
        // item 4206
        addTreeVer(
            tree,
            startId,
            onlyChild.id,
            null
        )
    } else {
        // item 4203
        junctions = []
        // item 4125
        if (children.length % 2 == 0) {
            // item 4145
            leftIndex = getLeftMiddleIndex(children)
            rightIndex = leftIndex + 1
            // item 4190
            leftX = getChildX(
                tree,
                children,
                leftIndex
            )
            // item 4191
            rightX = getChildX(
                tree,
                children,
                rightIndex
            )
            // item 4189
            startNode.x = Utils.snapUp(
                (leftX + rightX) / 2
            )
            // item 4205
            makeRopes(
                tree,
                level,
                children,
                junctions
            )
            // item 42210001
            j = 1;
            while (true) {
                // item 42210002
                if (j < junctions.length) {
                    
                } else {
                    break;
                }
                // item 4226
                if (j == rightIndex) {
                    
                } else {
                    // item 4223
                    leftJ = junctions[j - 1]
                    rightJ = junctions[j]
                    // item 4224
                    addTreeHor(
                        tree,
                        leftJ,
                        rightJ,
                        "bridge"
                    )
                }
                // item 42210003
                j++;
            }
            // item 4230
            x = startNode.x
            y = top - Config.METRE
            // item 4229
            tj = addTreeJunction(tree, level, x, y)
            // item 4231
            addTreeHor(
                tree,
                junctions[leftIndex],
                tj,
                "bridge"
            )
            // item 4232
            addTreeHor(
                tree,
                tj,
                junctions[rightIndex],
                "bridge"
            )
            // item 4225
            addTreeVer(
                tree,
                startId,
                tj,
                null
            )
        } else {
            // item 4130
            middleIndex = getMiddleIndex(children)
            // item 4132
            startNode.x = getChildX(
                tree,
                children,
                middleIndex
            )
            // item 4204
            makeRopes(
                tree,
                level,
                children,
                junctions
            )
            // item 42150001
            j = 1;
            while (true) {
                // item 42150002
                if (j < junctions.length) {
                    
                } else {
                    break;
                }
                // item 4218
                leftJ = junctions[j - 1]
                rightJ = junctions[j]
                // item 4219
                addTreeHor(
                    tree,
                    leftJ,
                    rightJ,
                    "bridge"
                )
                // item 42150003
                j++;
            }
            // item 4220
            addTreeVer(
                tree,
                startId,
                junctions[middleIndex],
                null
            )
        }
    }
    // item 4179
    realignLevelBox(
        tree,
        level
    )
}

function logicalToTreeVer(logical, tree, level, links) {
    var box, boxRight, child, childRoot, children, dockId, jLeft, left, prev, right, startId, startNode, top, x, y
    // item 3934
    children = level.children
    startId = level.nodeId
    startNode = tree.nodes[startId]
    box = level.box
    // item 3843
    right = rightBorder(startNode)
    // item 38130001
    var _ind3813 = 0;
    var _col3813 = links.children;
    var _len3813 = _col3813.length;
    while (true) {
        // item 38130002
        if (_ind3813 < _len3813) {
            
        } else {
            break;
        }
        // item 38130004
        var childId = _col3813[_ind3813];
        // item 3815
        child = logicalToTree(
            logical,
            tree,
            childId,
            true
        )
        // item 3816
        children.push(child.nodeId)
        // item 3844
        boxRight = child.box.right + Config.METRE * 2
        right = Math.max(right, boxRight)
        // item 38130003
        _ind3813++;
    }
    // item 3845
    box.right = right
    // item 3822
    x = leftBorder(startNode) + Config.METRE
    y = startNode.y
    // item 3823
    dockId = addTreeJunction(
        tree,
        level,
        x,
        y
    )
    // item 3826
    addTreeHor(
        tree,
        dockId,
        startId,
        "link"
    )
    // item 3824
    top = y + startNode.h + Config.METRE
    left = x + Config.METRE
    prev = dockId
    // item 38200001
    var _ind3820 = 0;
    var _col3820 = children;
    var _len3820 = _col3820.length;
    while (true) {
        // item 38200002
        if (_ind3820 < _len3820) {
            
        } else {
            break;
        }
        // item 38200004
        var childId = _col3820[_ind3820];
        // item 3827
        child = tree.levels[childId]
        childRoot = tree.nodes[childId]
        y = top + childRoot.h
        // item 3825
        jLeft = addTreeJunction(
            tree,
            level,
            x,
            y
        )
        // item 3828
        addTreeHor(
            tree,
            jLeft,
            child.dockId,
            null
        )
        // item 3829
        addTreeVer(
            tree,
            prev,
            jLeft,
            "arm"
        )
        // item 3830
        child.left = left
        child.top = top
        top += (child.box.bottom + Config.METRE)
        prev = jLeft
        // item 38200003
        _ind3820++;
    }
    // item 3846
    box.bottom = top - Config.METRE
    // item 4105
    level.dockId = dockId
}

function makeBox(node) {
    var box
    // item 305
    box = new Utils.Box(
        leftBorder(node),
        topBorder(node),
        rightBorder(node),
        bottomBorder(node)
    )
    // item 306
    return box
}

function makeDummyItem(id, render, type, content, width) {
    var item, size
    // item 255
    item = {
        id : String(id),
        isLine : false,
        type : type,
        content : content,
        x : 0,
        y : 0
    }
    // item 264
    item.w = width
    // item 256
    size = Drakon.fitItem(item, render)
    setItemDims(item, size)
    // item 257
    return item
}

function makeDummyJunction(id, x, y) {
    // item 270
    var item = {
    	id: String(id),
    	isLine: false,
    	x: x,
    	y: y,
    	w: 0,
    	h: 0,
    	type: "junction"
    };
    // item 271
    return item
}

function makeDummyLine(id, isVertical, head, tail, role) {
    // item 277
    var item = {
    	id: String(id),
    	isLine: true,
    	isVertical: isVertical,
    	head: head,
    	tail: tail,
    	role: role,
    	type: isVertical ? "vertical" : "horizontal"
    };
    // item 278
    return item;
}

function makeRopes(tree, level, children, junctions) {
    var child, joint, main, x, y
    // item 41970001
    var _ind4197 = 0;
    var _col4197 = children;
    var _len4197 = _col4197.length;
    while (true) {
        // item 41970002
        if (_ind4197 < _len4197) {
            
        } else {
            break;
        }
        // item 41970004
        var childId = _col4197[_ind4197];
        // item 4199
        child = tree.levels[childId]
        main = tree.nodes[childId]
        // item 4201
        x = child.left + main.x
        y = child.top - Config.METRE
        // item 4200
        joint = addTreeJunction(
            tree,
            level,
            x,
            y
        )
        // item 4202
        addTreeVer(
            tree,
            joint,
            childId
        )
        // item 4217
        junctions.push(joint)
        // item 41970003
        _ind4197++;
    }
}

function makeSubtree(graph, node) {
    var box
    // item 898
    box = measureSubtree(
        graph,
        node
    )
    // item 899
    return {
        box : box,
        node : node
    }
}

function measureSubtree(graph, startNode) {
    var actualStart, box, edges, leftEdge, leftmost, node, nodes
    // item 194
    box = makeBox(startNode)
    // item 219
    nodes = {}
    edges = {}
    nodes[startNode.id] = true
    leftmost = null
    // item 223
    if (startNode.down) {
        // item 226
        actualStart = down(graph, startNode)
        // item 220
        graph.enumerateManhattan(
            actualStart.id,
            nodes,
            edges
        )
        // item 2130
        if (leftmost) {
            // item 2133
            delete nodes[leftmost.id]
        }
        // item 2440001
        var _ind244 = 0;
        var _col244 = nodes;
        var _keys244 = Object.keys(_col244); 
        var _len244 = _keys244.length;
        while (true) {
            // item 2440002
            if (_ind244 < _len244) {
                
            } else {
                break;
            }
            // item 2440004
            var nodeId = _keys244[_ind244]; var _ = _col244[nodeId];
            // item 246
            node = graph.getNode(nodeId)
            // item 247
            box.left = Math.min(box.left, leftBorder(node))
            box.top = Math.min(box.top, topBorder(node))
            box.right = Math.max(box.right, rightBorder(node))
            box.bottom = Math.max(box.bottom, bottomBorder(node))
            // item 2440003
            _ind244++;
        }
    } else {
        // item 227
        if (startNode.left) {
            // item 230
            leftEdge = graph.getEdge(
                startNode.left
            )
            // item 231
            if (leftEdge.role == "link") {
                // item 232
                actualStart = left(graph, startNode)
                // item 2127
                if (actualStart.left) {
                    // item 2126
                    leftmost = left(graph, actualStart)
                    nodes[leftmost.id] = true
                }
                // item 220
                graph.enumerateManhattan(
                    actualStart.id,
                    nodes,
                    edges
                )
                // item 2130
                if (leftmost) {
                    // item 2133
                    delete nodes[leftmost.id]
                }
                // item 2440001
                var _ind244 = 0;
                var _col244 = nodes;
                var _keys244 = Object.keys(_col244); 
                var _len244 = _keys244.length;
                while (true) {
                    // item 2440002
                    if (_ind244 < _len244) {
                        
                    } else {
                        break;
                    }
                    // item 2440004
                    var nodeId = _keys244[_ind244]; var _ = _col244[nodeId];
                    // item 246
                    node = graph.getNode(nodeId)
                    // item 247
                    box.left = Math.min(box.left, leftBorder(node))
                    box.top = Math.min(box.top, topBorder(node))
                    box.right = Math.max(box.right, rightBorder(node))
                    box.bottom = Math.max(box.bottom, bottomBorder(node))
                    // item 2440003
                    _ind244++;
                }
            }
        }
    }
    // item 237
    return box
}

function moveAllNodes(commandList, dx, dy) {
    // item 44140001
    var _ind4414 = 0;
    var _col4414 = commandList;
    var _len4414 = _col4414.length;
    while (true) {
        // item 44140002
        if (_ind4414 < _len4414) {
            
        } else {
            break;
        }
        // item 44140004
        var command = _col4414[_ind4414];
        // item 4416
        if (command.table == "nodes") {
            // item 4419
            command.fields.x += dx
            command.fields.y += dy
        }
        // item 44140003
        _ind4414++;
    }
}

function moveHorTo(pgraph, node, target, movedNodes) {
    var delta
    // item 861
    delta = target - node.x
    // item 862
    if (delta == 0) {
        
    } else {
        // item 865
        pgraph.moveRight(
            node.id,
            delta,
            movedNodes
        )
    }
}

function mustFitSiblings(action) {
    // item 36820001
    if ((action === "miv02") || (action === "miv03")) {
        // item 3693
        return true
    } else {
        // item 3694
        return false
    }
}

function positionHorChild(graph, oldSubtree, newSubtree) {
    var above, dx, dy
    // item 923
    above = up(
        graph,
        oldSubtree.node
    )
    // item 929
    dx = oldSubtree.box.right + Config.METRE
    dy = above.y + Config.METRE
    // item 1505
    positionSubtree(
        newSubtree,
        dx,
        dy
    )
}

function positionHorChildLeft(graph, oldSubtree, newSubtree) {
    var above, dx, dy
    // item 952
    above = up(
        graph,
        oldSubtree.node
    )
    // item 954
    dx = oldSubtree.box.left - Config.METRE -
    	newSubtree.box.right
    dy = above.y + Config.METRE
    // item 1506
    positionSubtree(
        newSubtree,
        dx,
        dy
    )
}

function positionSubtree(subtree, x, y) {
    // item 4096
    positionSubtreeNode(
        subtree,
        subtree.node.id,
        x,
        y
    )
}

function positionSubtreeNode(subtree, nodeId, x, y) {
    var box, dx, dy, level, node
    // item 4079
    level = subtree.levels[nodeId]
    // item 4080
    dx = level.left + x
    dy = level.top + y
    // item 4089
    box = subtree.box
    // item 4090
    box.left += dx
    box.top += dy
    box.right += dx
    box.bottom += dy
    // item 40840001
    var _ind4084 = 0;
    var _col4084 = level.nodes;
    var _len4084 = _col4084.length;
    while (true) {
        // item 40840002
        if (_ind4084 < _len4084) {
            
        } else {
            break;
        }
        // item 40840004
        var nodeId = _col4084[_ind4084];
        // item 4086
        node = subtree.nodes[nodeId]
        // item 4087
        node.x += dx
        node.y += dy
        // item 40840003
        _ind4084++;
    }
    // item 40930001
    var _ind4093 = 0;
    var _col4093 = level.children;
    var _len4093 = _col4093.length;
    while (true) {
        // item 40930002
        if (_ind4093 < _len4093) {
            
        } else {
            break;
        }
        // item 40930004
        var childId = _col4093[_ind4093];
        // item 4095
        positionSubtreeNode(
            subtree,
            childId,
            dx,
            dy
        )
        // item 40930003
        _ind4093++;
    }
}

function pushDeleteEdge(commandList, id) {
    // item 385
    var deleteUp = new Command(
    	"delete",
    	"edges",
    	id,
    	null
    );
    commandList.push(deleteUp);
}

function pushDeleteNode(commandList, id) {
    // item 391
    var deleteDown = new Command(
    	"delete",
    	"nodes",
    	id,
    	null
    )
    commandList.push(deleteDown)
}

function pushForwardDeleteNode(commandList, id) {
    // item 4397
    var deleteDown = new Command(
    	"delete",
    	"nodes",
    	id,
    	null
    )
    commandList.unshift(deleteDown)
}

function pushInsertEdge(commandList, edge) {
    var fields, newEdge, type
    // item 4010
    if (edge.isVertical) {
        // item 4013
        type = "vertical"
    } else {
        // item 4014
        type = "horizontal"
    }
    // item 4015
    fields = {
        type : type,
        isVertical : edge.isVertical,
        isLine : true,
        head : edge.head,
        tail : edge.tail,
        role : edge.role
    }
    // item 355
    newEdge = new Command(
        "insert",
        "edges",
        edge.id,
        fields
    )
    // item 4016
    commandList.push(newEdge)
}

function pushInsertHorizontal(commandList, edgeId, up, down, role) {
    // item 349
    var newEdge = new Command(
    	"insert",
    	"edges",
    	edgeId,
    	{
    		type: "horizontal",
    		isVertical: false,
    		isLine: true,
    		head: up,
    		tail: down,
    		role: role
    	}
    );
    commandList.push(newEdge);
}

function pushInsertNode(commands, node) {
    var command, fields
    // item 324
    fields = {
        type : node.type,
        isLine : false,
        x : node.x,
        y : node.y,
        w : node.w,
        h : node.h,
        a : node.a,
        content : node.content,
        flag1 : node.flag1,
        role : node.role
    }
    // item 325
    if (node.tb) {
        // item 328
        fields.tb = node.tb;
    }
    // item 329
    if (node.tb2) {
        // item 332
        fields.tb2 = node.tb2;
    }
    // item 323
    command = new Command(
        "insert",
        "nodes",
        node.id,
        fields
    )
    // item 322
    commands.push(command)
}

function pushInsertVertical(commandList, edgeId, up, down, role) {
    // item 4006
    var newEdge = new Command(
    	"insert",
    	"edges",
    	edgeId,
    	{
    		type: "vertical",
    		isVertical: true,
    		isLine: true,
    		head: up,
    		tail: down,
    		role: role
    	}
    );
    commandList.push(newEdge);
}

function pushSubtree(commandList, subtree) {
    // item 39950001
    var _ind3995 = 0;
    var _col3995 = subtree.nodes;
    var _keys3995 = Object.keys(_col3995); 
    var _len3995 = _keys3995.length;
    while (true) {
        // item 39950002
        if (_ind3995 < _len3995) {
            
        } else {
            break;
        }
        // item 39950004
        var id = _keys3995[_ind3995]; var node = _col3995[id];
        // item 3997
        pushInsertNode(
            commandList,
            node
        )
        // item 39950003
        _ind3995++;
    }
    // item 39980001
    var _ind3998 = 0;
    var _col3998 = subtree.edges;
    var _keys3998 = Object.keys(_col3998); 
    var _len3998 = _keys3998.length;
    while (true) {
        // item 39980002
        if (_ind3998 < _len3998) {
            
        } else {
            break;
        }
        // item 39980004
        var id = _keys3998[_ind3998]; var edge = _col3998[id];
        // item 4000
        pushInsertEdge(
            commandList,
            edge
        )
        // item 39980003
        _ind3998++;
    }
}

function rayDown(pgraph, movedNodes, begin, endY) {
    var box, delta, excluded
    // item 1470
    box = new Utils.Box(
        begin.x,
        begin.y,
        begin.x,
        begin.y
    )
    // item 1471
    delta = endY - begin.y
    // item 1474
    excluded = {}
    excluded[begin.id] = true
    // item 1473
    pgraph.pushObjects(
        box,
        excluded,
        delta,
        "vertical",
        movedNodes
    )
}

function rayRight(pgraph, movedNodes, begin, excludeId, endX) {
    var box, delta, excluded
    // item 1802
    box = new Utils.Box(
        begin.x,
        begin.y,
        begin.x,
        begin.y
    )
    // item 1803
    delta = endX - begin.x
    // item 1805
    excluded = {}
    excluded[excludeId] = true
    // item 1804
    pgraph.pushObjects(
        box,
        excluded,
        delta,
        "horizontal",
        movedNodes
    )
}

function realignLevelBox(tree, level) {
    var box, children, dx, node, parentLeft, startId, startNode
    // item 4153
    children = level.children
    startId = level.nodeId
    startNode = tree.nodes[startId]
    box = level.box
    // item 4152
    parentLeft = leftBorder(startNode)
    // item 4154
    dx = parentLeft - box.left
    // item 4155
    if (dx < 0) {
        // item 41710001
        var _ind4171 = 0;
        var _col4171 = level.nodes;
        var _len4171 = _col4171.length;
        while (true) {
            // item 41710002
            if (_ind4171 < _len4171) {
                
            } else {
                break;
            }
            // item 41710004
            var nodeId = _col4171[_ind4171];
            // item 4173
            node = tree.nodes[nodeId]
            // item 4174
            node.x -= dx
            // item 41710003
            _ind4171++;
        }
        // item 41750001
        var _ind4175 = 0;
        var _col4175 = level.children;
        var _len4175 = _col4175.length;
        while (true) {
            // item 41750002
            if (_ind4175 < _len4175) {
                
            } else {
                break;
            }
            // item 41750004
            var nodeId = _col4175[_ind4175];
            // item 4177
            level = tree.levels[nodeId]
            // item 4178
            level.left -= dx
            // item 41750003
            _ind4175++;
        }
    }
}

function recenterLeft(pgraph, movedNodes, itemId, commandList, id) {
    var below, deltaX, graph, item, leftJunction, newT, rightJunction, targetX
    // item 558
    graph = pgraph.graph
    // item 562
    item = graph.getNode(itemId)
    below = down(graph, item)
    // item 546
    pushDeleteEdge(
        commandList,
        item.down
    )
    // item 555
    pgraph.graph.removeItem(item.down)
    pgraph.rebuildCache()
    // item 557
    leftJunction = left(
        graph,
        below
    )
    // item 547
    if (below.down) {
        // item 571
        targetX = getMiddle(leftJunction, below)
        // item 572
        moveHorTo(
            pgraph,
            item,
            targetX,
            movedNodes
        )
        // item 573
        pushDeleteEdge(
            commandList,
            below.left
        )
        // item 574
        newT = makeDummyJunction(
            id,
            item.x,
            below.y
        )
        // item 575
        id++
        // item 582
        pushInsertNode(
            commandList,
            newT
        )
        // item 576
        pushInsertHorizontal(
            commandList,
            id,
            newT.id,
            below.id,
            "bridge"
        )
        // item 577
        id++
        // item 578
        pushInsertHorizontal(
            commandList,
            id,
            leftJunction.id,
            newT.id,
            "bridge"
        )
        // item 579
        id++
        // item 583
        pushInsertVertical(
            commandList,
            id,
            itemId,
            newT.id,
            null
        )
        // item 584
        id++
    } else {
        // item 568
        rightJunction = right(
            graph,
            below
        )
        // item 560
        deltaX = leftJunction.x - item.x
        // item 559
        pgraph.moveRight(
            item.id,
            deltaX,
            movedNodes
        )
        // item 565
        pushDeleteEdge(
            commandList,
            below.left
        )
        // item 566
        pushDeleteEdge(
            commandList,
            below.right
        )
        // item 567
        pushDeleteNode(
            commandList,
            below.id
        )
        // item 569
        pushInsertHorizontal(
            commandList,
            id,
            leftJunction.id,
            rightJunction.id,
            "bridge"
        )
        // item 570
        id++
        // item 563
        pushInsertVertical(
            commandList,
            id,
            itemId,
            leftJunction.id,
            null
        )
        // item 564
        id++
    }
    // item 545
    return id
}

function recenterRight(pgraph, movedNodes, itemId, commandList, id) {
    var below, deltaX, graph, item, leftJunction, newT, rightJunction, targetX
    // item 405
    graph = pgraph.graph
    // item 423
    item = graph.getNode(itemId)
    below = down(graph, item)
    // item 392
    pushDeleteEdge(
        commandList,
        item.down
    )
    // item 402
    pgraph.graph.removeItem(item.down)
    pgraph.rebuildCache()
    // item 404
    rightJunction = right(
        graph,
        below
    )
    // item 393
    if (below.down) {
        // item 1183
        targetX = getMiddle(rightJunction, below)
        // item 1184
        moveHorTo(
            pgraph,
            item,
            targetX,
            movedNodes
        )
        // item 435
        pushDeleteEdge(
            commandList,
            below.right
        )
        // item 436
        newT = makeDummyJunction(
            id,
            item.x,
            below.y
        )
        // item 437
        id++
        // item 457
        pushInsertNode(
            commandList,
            newT
        )
        // item 438
        pushInsertHorizontal(
            commandList,
            id,
            below.id,
            newT.id,
            "bridge"
        )
        // item 439
        id++
        // item 440
        pushInsertHorizontal(
            commandList,
            id,
            newT.id,
            rightJunction.id,
            "bridge"
        )
        // item 441
        id++
        // item 458
        pushInsertVertical(
            commandList,
            id,
            itemId,
            newT.id,
            null
        )
        // item 459
        id++
    } else {
        // item 430
        leftJunction = left(
            graph,
            below
        )
        // item 407
        deltaX = rightJunction.x - item.x
        // item 406
        pgraph.moveRight(
            item.id,
            deltaX,
            movedNodes
        )
        // item 427
        pushDeleteEdge(
            commandList,
            below.left
        )
        // item 428
        pushDeleteEdge(
            commandList,
            below.right
        )
        // item 429
        pushDeleteNode(
            commandList,
            below.id
        )
        // item 431
        pushInsertHorizontal(
            commandList,
            id,
            leftJunction.id,
            rightJunction.id,
            "bridge"
        )
        // item 432
        id++
        // item 425
        pushInsertVertical(
            commandList,
            id,
            itemId,
            rightJunction.id,
            null
        )
        // item 426
        id++
    }
    // item 378
    return id
}

function removeLinkRole(commands, nodeId) {
    var edge, isThatLink
    // item 4427
    isThatLink = function(item) {
        return item.fields.tail == nodeId && item.type == "insert"
    }
    // item 4428
    edge = Utils.findFirst(
        commands,
        isThatLink
    )
    // item 4429
    delete edge.fields.role
}

function right(graph, node) {
    // item 48
    return graph.getNodeRightEx(node)
}

function rightBorder(node) {
    // item 206
    return node.x + node.w
}

function setItemDims(item, size) {
    // item 287
    item.w = size.w;
    item.h = size.h;
    // item 288
    if ("a" in size) {
        // item 291
        item.a = size.a;
    }
    // item 292
    if (size.tb) {
        // item 295
        item.tb = size.tb;
    }
    // item 296
    if (size.tb2) {
        // item 299
        item.tb2 = size.tb2;
    }
}

function setItemWidth(render, pgraph, id, width, commands) {
    var graph, item, result, vertical, vitem
    // item 3340
    graph = pgraph.graph
    // item 3351
    item = graph.getItem(id)
    // item 3352
    result = {
        commands : commands
    }
    // item 3348
    if (isVerSibling(item)) {
        // item 3339
        vertical = getVerSiblings(graph, item)
        // item 33420001
        var _ind3342 = 0;
        var _col3342 = vertical;
        var _len3342 = _col3342.length;
        while (true) {
            // item 33420002
            if (_ind3342 < _len3342) {
                
            } else {
                break;
            }
            // item 33420004
            var itemId = _col3342[_ind3342];
            // item 3344
            vitem = graph.getItem(itemId)
            // item 3341
            changeItem(
                render,
                pgraph,
                itemId,
                width,
                vitem.content,
                result
            )
            // item 33420003
            _ind3342++;
        }
    } else {
        // item 3354
        changeItem(
            render,
            pgraph,
            id,
            width,
            item.content,
            result
        )
    }
}

function softLeft(graph, item) {
    var edge, upEdge
    // item 3456
    if (item.right) {
        // item 3460
        edge = graph.getEdge(item.right)
        // item 3461
        if (edge.role == "link") {
            // item 3459
            return graph.getNodeRight(item)
        } else {
            // item 3513
            if (item.up) {
                // item 3514
                upEdge = graph.getEdge(item.up)
                // item 3516
                if (upEdge.role == "arm") {
                    // item 3459
                    return graph.getNodeRight(item)
                } else {
                    // item 3518
                    return null
                }
            } else {
                // item 3518
                return null
            }
        }
    } else {
        // item 3518
        return null
    }
}

function swHor(render, pgraph, id, fields, movedNodes) {
    // item 3300
    if ("h" in fields) {
        // item 3291
        changeHeight(
            pgraph,
            id,
            fields.h,
            movedNodes
        )
    }
    // item 3407
    if ("w" in fields) {
        // item 3406
        changeWidthBoth(
            pgraph,
            id,
            fields.w,
            movedNodes
        )
    }
}

function swVer(render, pgraph, id, fields, movedNodes) {
    // item 3436
    if ("h" in fields) {
        // item 3435
        changeHeight(
            pgraph,
            id,
            fields.h,
            movedNodes
        )
    }
    // item 3441
    if ("w" in fields) {
        // item 3440
        changeWidthRight(
            pgraph,
            id,
            fields.w,
            movedNodes
        )
    }
}

function swipe(pgraph, movedNodes, x, y1, y2, x2) {
    var box, delta, excluded
    // item 1494
    delta = x2 - x
    // item 1480
    box = new Utils.Box(
        x,
        y1,
        x,
        y2
    )
    // item 1482
    excluded = {}
    // item 1481
    pgraph.pushObjects(
        box,
        excluded,
        delta,
        "horizontal",
        movedNodes
    )
}

function swipeDown(pgraph, movedNodes, x, y, x2, y2) {
    var box, delta, excluded
    // item 1815
    delta = y2 - y
    // item 1812
    box = new Utils.Box(
        x,
        y,
        x2,
        y
    )
    // item 1814
    excluded = {}
    // item 1813
    pgraph.pushObjects(
        box,
        excluded,
        delta,
        "vertical",
        movedNodes
    )
}

function topBorder(node) {
    // item 212
    return node.y - node.h
}

function trace(name, itemId) {
    // item 1219
    CallTrace.add(
        name,
        [itemId]
    )
}

function up(graph, node) {
    // item 42
    return graph.getNodeUpEx(node)
}

function ME__p_below() {
    // item 3168
    return down(
        this.graph(),
        this.item()
    )
}

function ME__p_item() {
    // item 3164
    return this.graph().getItem(
        this.itemId()
    )
}

function ME__p_leftCorner() {
    // item 3176
    return goLeftToEnd(
        this.graph(),
        this.below()
    )
}

function ME__p_mdh01() {
    var commandList, id
    // item 2695
    trace("mdh01", this.itemId())
    // item 2693
    commandList = []
    // item 2696
    deleteHorItem(
        this.graph(),
        this.item(),
        commandList
    )
    // item 2694
    id = this.nextId()
    // item 2692
    return {
        commands : commandList,
        nextId : id
    }
}

function ME__p_mdh02() {
    var above, commandList, edges, graph, id, leftCorner, movedNodes, nodes, parent, pgraph, sibling, tj
    // item 2785
    trace("mdh02", this.itemId())
    // item 2777
    commandList = []
    movedNodes = {}
    nodes = {}
    edges = {}
    // item 2779
    above = up(this.graph(), this.item())
    // item 2778
    nodes[above.id] = true
    // item 2780
    this.graph().enumerateManhattan(
        this.item().id,
        nodes,
        edges
    )
    // item 2783
    id = this.nextId()
    // item 2801
    parent = getHorParent(
        this.graph(),
        above.id
    )
    // item 2791
    tj = left(this.graph(), above)
    leftCorner = left(this.graph(), tj)
    sibling = down(this.graph(), leftCorner)
    // item 2792
    nodes[tj.id] = true
    nodes[leftCorner.id] = true
    edges[tj.up] = true
    edges[tj.left] = true
    edges[tj.right] = true
    edges[leftCorner.down] = true
    // item 2781
    deleteSubgraph(
        nodes,
        edges,
        commandList
    )
    // item 2782
    pgraph = createPhysicalGraph(
        this.items(),
        this.graph(),
        this.render()
    )
    // item 2787
    graph = pgraph.graph
    // item 2793
    graph.removeItem(tj.up)
    // item 2794
    pgraph.rebuildCache()
    // item 2786
    parent = graph.getNode(parent.id)
    // item 2795
    moveHorTo(
        pgraph,
        parent,
        leftCorner.x,
        movedNodes
    )
    // item 2799
    pushInsertVertical(
        commandList,
        id,
        parent.id,
        sibling.id,
        null
    )
    // item 2800
    id++
    // item 2784
    return buildEditResult(
        pgraph,
        movedNodes,
        commandList,
        id
    )
}

function ME__p_mdh03() {
    var above, commandList, edges, id, movedNodes, nodes, pgraph
    // item 2217
    trace("mdh03", this.itemId())
    // item 2208
    commandList = []
    movedNodes = {}
    nodes = {}
    edges = {}
    // item 2210
    above = up(this.graph(), this.item())
    // item 2209
    edges[above.left] = true
    edges[above.down] = true
    nodes[above.id] = true
    // item 2211
    this.graph().enumerateManhattan(
        this.item().id,
        nodes,
        edges
    )
    // item 2212
    deleteSubgraph(
        nodes,
        edges,
        commandList
    )
    // item 2213
    pgraph = createPhysicalGraph(
        this.items(),
        this.graph(),
        this.render()
    )
    // item 2214
    id = this.nextId()
    // item 2215
    id = recenterLeft(
        pgraph,
        movedNodes,
        getHorParent(this.graph(), above.id).id,
        commandList,
        id
    )
    // item 2216
    return buildEditResult(
        pgraph,
        movedNodes,
        commandList,
        id
    )
}

function ME__p_mdh04() {
    var above, commandList, edges, graph, id, movedNodes, nodes, parent, pgraph, rightCorner, sibling, tj
    // item 2890
    trace("mdh02", this.itemId())
    // item 2882
    commandList = []
    movedNodes = {}
    nodes = {}
    edges = {}
    // item 2884
    above = up(this.graph(), this.item())
    // item 2883
    nodes[above.id] = true
    // item 2885
    this.graph().enumerateManhattan(
        this.item().id,
        nodes,
        edges
    )
    // item 2888
    id = this.nextId()
    // item 2906
    parent = getHorParent(
        this.graph(),
        above.id
    )
    // item 2896
    tj = right(this.graph(), above)
    rightCorner = right(this.graph(), tj)
    sibling = down(this.graph(), rightCorner)
    // item 2897
    nodes[tj.id] = true
    nodes[rightCorner.id] = true
    edges[tj.up] = true
    edges[tj.left] = true
    edges[tj.right] = true
    edges[rightCorner.down] = true
    // item 2886
    deleteSubgraph(
        nodes,
        edges,
        commandList
    )
    // item 2887
    pgraph = createPhysicalGraph(
        this.items(),
        this.graph(),
        this.render()
    )
    // item 2892
    graph = pgraph.graph
    // item 2898
    graph.removeItem(tj.up)
    // item 2899
    pgraph.rebuildCache()
    // item 2891
    parent = graph.getNode(parent.id)
    // item 2900
    moveHorTo(
        pgraph,
        parent,
        rightCorner.x,
        movedNodes
    )
    // item 2904
    pushInsertVertical(
        commandList,
        id,
        parent.id,
        sibling.id,
        null
    )
    // item 2905
    id++
    // item 2889
    return buildEditResult(
        pgraph,
        movedNodes,
        commandList,
        id
    )
}

function ME__p_mdh05() {
    var above, commandList, edges, id, movedNodes, nodes, pgraph
    // item 2239
    trace("mdh05", this.itemId())
    // item 2236
    commandList = []
    movedNodes = {}
    nodes = {}
    edges = {}
    // item 2231
    above = up(this.graph(), this.item())
    // item 2230
    edges[above.right] = true
    edges[above.down] = true
    nodes[above.id] = true
    // item 2232
    this.graph().enumerateManhattan(
        this.item().id,
        nodes,
        edges
    )
    // item 2233
    deleteSubgraph(
        nodes,
        edges,
        commandList
    )
    // item 2234
    pgraph = createPhysicalGraph(
        this.items(),
        this.graph(),
        this.render()
    )
    // item 2235
    id = this.nextId()
    // item 2237
    id = recenterRight(
        pgraph,
        movedNodes,
        getHorParent(this.graph(), above.id).id,
        commandList,
        id
    )
    // item 2238
    return buildEditResult(
        pgraph,
        movedNodes,
        commandList,
        id
    )
}

function ME__p_mdh06() {
    var above, leftAbove, rightAbove
    // item 2408
    trace("mdh06", this.itemId())
    // item 2393
    above = up(this.graph(), this.item())
    rightAbove = right(this.graph(), above)
    leftAbove = left(this.graph(), above)
    // item 2398
    if (above.up) {
        // item 2396
        return this.mdh061()
    } else {
        // item 2397
        if (rightAbove.up) {
            // item 2394
            if (rightAbove.down) {
                // item 2404
                return this.mdh064()
            } else {
                // item 2401
                return this.mdh062()
            }
        } else {
            // item 2405
            if ((leftAbove.up) && (!(leftAbove.down))) {
                // item 2402
                return this.mdh063()
            } else {
                // item 2406
                return this.mdh064()
            }
        }
    }
}

function ME__p_mdh061() {
    var commandList, id
    // item 2416
    trace("mdh061", this.itemId())
    // item 2414
    commandList = []
    // item 2417
    deleteHorItem(
        this.graph(),
        this.item(),
        commandList
    )
    // item 2415
    id = this.nextId()
    // item 2413
    return {
        commands : commandList,
        nextId : id
    }
}

function ME__p_mdh062() {
    var above, commandList, graph, id, leftAbove, movedNodes, parent, pgraph, rightAbove, rightAbove2
    // item 2455
    trace("mdh062", this.itemId())
    // item 2433
    commandList = []
    movedNodes = {}
    // item 2432
    id = this.nextId()
    // item 2434
    pgraph = createPhysicalGraph(
        this.items(),
        this.graph(),
        this.render()
    )
    // item 2438
    graph = pgraph.graph
    // item 2439
    above = up(this.graph(), this.item())
    leftAbove = left(this.graph(), above)
    rightAbove = right(this.graph(), above)
    rightAbove2 = right(this.graph(), rightAbove)
    // item 2447
    parent = up(this.graph(), rightAbove)
    // item 2456
    deleteHorItem(
        this.graph(),
        this.item(),
        commandList
    )
    // item 2457
    graph.removeItem(above.down)
    // item 2440
    deleteEdge(
        pgraph,
        commandList,
        above.left
    )
    // item 2441
    deleteEdge(
        pgraph,
        commandList,
        above.right
    )
    // item 2442
    deleteEdge(
        pgraph,
        commandList,
        rightAbove.right
    )
    // item 2443
    deleteEdge(
        pgraph,
        commandList,
        rightAbove.up
    )
    // item 2444
    deleteNode(
        pgraph,
        commandList,
        rightAbove.id
    )
    // item 2445
    deleteNode(
        pgraph,
        commandList,
        above.id
    )
    // item 2454
    pgraph.rebuildCache()
    // item 2446
    moveHorTo(
        pgraph,
        parent,
        rightAbove2.x,
        movedNodes
    )
    // item 2450
    pushInsertHorizontal(
        commandList,
        id,
        leftAbove.id,
        rightAbove2.id,
        "bridge"
    )
    // item 2451
    id++
    // item 2452
    pushInsertVertical(
        commandList,
        id,
        parent.id,
        rightAbove2.id,
        null
    )
    // item 2453
    id++
    // item 2435
    return buildEditResult(
        pgraph,
        movedNodes,
        commandList,
        id
    )
}

function ME__p_mdh063() {
    var above, commandList, graph, id, leftAbove, leftAbove2, movedNodes, parent, pgraph, rightAbove
    // item 2495
    trace("mdh063", this.itemId())
    // item 2473
    commandList = []
    movedNodes = {}
    // item 2472
    id = this.nextId()
    // item 2474
    pgraph = createPhysicalGraph(
        this.items(),
        this.graph(),
        this.render()
    )
    // item 2478
    graph = pgraph.graph
    // item 2479
    above = up(this.graph(), this.item())
    rightAbove = right(this.graph(), above)
    leftAbove = left(this.graph(), above)
    leftAbove2 = left(this.graph(), leftAbove)
    // item 2487
    parent = up(this.graph(), leftAbove)
    // item 2496
    deleteHorItem(
        this.graph(),
        this.item(),
        commandList
    )
    // item 2497
    graph.removeItem(above.down)
    // item 2480
    deleteEdge(
        pgraph,
        commandList,
        above.left
    )
    // item 2481
    deleteEdge(
        pgraph,
        commandList,
        above.right
    )
    // item 2482
    deleteEdge(
        pgraph,
        commandList,
        leftAbove.left
    )
    // item 2483
    deleteEdge(
        pgraph,
        commandList,
        leftAbove.up
    )
    // item 2484
    deleteNode(
        pgraph,
        commandList,
        leftAbove.id
    )
    // item 2485
    deleteNode(
        pgraph,
        commandList,
        above.id
    )
    // item 2494
    pgraph.rebuildCache()
    // item 2486
    moveHorTo(
        pgraph,
        parent,
        leftAbove2.x,
        movedNodes
    )
    // item 2490
    pushInsertHorizontal(
        commandList,
        id,
        leftAbove2.id,
        rightAbove.id,
        "bridge"
    )
    // item 2491
    id++
    // item 2492
    pushInsertVertical(
        commandList,
        id,
        parent.id,
        leftAbove2.id,
        null
    )
    // item 2493
    id++
    // item 2475
    return buildEditResult(
        pgraph,
        movedNodes,
        commandList,
        id
    )
}

function ME__p_mdh064() {
    var above, commandList, graph, id, leftAbove, movedNodes, parent, pgraph, rightAbove
    // item 2646
    trace("mdh064", this.itemId())
    // item 2630
    commandList = []
    movedNodes = {}
    // item 2629
    id = this.nextId()
    // item 2631
    pgraph = createPhysicalGraph(
        this.items(),
        this.graph(),
        this.render()
    )
    // item 2635
    graph = pgraph.graph
    // item 2636
    above = up(graph, this.item())
    leftAbove = left(graph, above)
    rightAbove = right(graph, above)
    // item 2640
    parent = getHorParent(
        graph,
        above.id
    )
    // item 2647
    deleteHorItem(
        this.graph(),
        this.item(),
        commandList
    )
    // item 2648
    graph.removeItem(above.down)
    // item 2637
    deleteEdge(
        pgraph,
        commandList,
        above.left
    )
    // item 2638
    deleteEdge(
        pgraph,
        commandList,
        above.right
    )
    // item 2639
    deleteNode(
        pgraph,
        commandList,
        above.id
    )
    // item 2645
    pgraph.rebuildCache()
    // item 2650
    if (parent.x > above.x) {
        // item 2649
        id = recenterRight(
            pgraph,
            movedNodes,
            parent.id,
            commandList,
            id
        )
    } else {
        // item 2653
        id = recenterLeft(
            pgraph,
            movedNodes,
            parent.id,
            commandList,
            id
        )
    }
    // item 2643
    pushInsertHorizontal(
        commandList,
        id,
        leftAbove.id,
        rightAbove.id,
        "bridge"
    )
    // item 2644
    id++
    // item 2632
    return buildEditResult(
        pgraph,
        movedNodes,
        commandList,
        id
    )
}

function ME__p_mdv01() {
    var commandList, edges, id, leftmost, lowerJ, nodes, parent, upperJ
    // item 2974
    trace("mdv01", this.itemId())
    // item 2969
    commandList = []
    nodes = {}
    edges = {}
    // item 2970
    lowerJ = goLeftToEnd(this.graph(), this.item())
    upperJ = up(this.graph(), lowerJ)
    parent = right(this.graph(), upperJ)
    // item 2973
    id = this.nextId()
    // item 2978
    nodes[lowerJ.id] = true
    nodes[upperJ.id] = true
    edges[upperJ.down] = true
    edges[upperJ.right] = true
    // item 2971
    this.graph().enumerateManhattan(
        this.item().id,
        nodes,
        edges
    )
    // item 2979
    if (upperJ.left) {
        // item 2986
        leftmost = left(this.graph(), upperJ)
        // item 2982
        edges[upperJ.left] = true
        // item 2983
        deleteSubgraph(
            nodes,
            edges,
            commandList
        )
        // item 2984
        pushInsertHorizontal(
            commandList,
            id,
            leftmost.id,
            parent.id,
            null
        )
        // item 2985
        id++
    } else {
        // item 2972
        deleteSubgraph(
            nodes,
            edges,
            commandList
        )
    }
    // item 2987
    return {
        commands : commandList,
        nextId : id
    }
}

function ME__p_mdv02() {
    var commandList, edges, id, lowerJ, nodes, upperJ
    // item 3040
    trace("mdv02", this.itemId())
    // item 3035
    commandList = []
    nodes = {}
    edges = {}
    // item 3036
    lowerJ = goLeftToEnd(this.graph(), this.item())
    upperJ = up(this.graph(), lowerJ)
    // item 3039
    id = this.nextId()
    // item 3044
    nodes[lowerJ.id] = true
    edges[lowerJ.up] = true
    edges[lowerJ.right] = true
    // item 3037
    this.graph().enumerateManhattan(
        this.item().id,
        nodes,
        edges
    )
    // item 3038
    deleteSubgraph(
        nodes,
        edges,
        commandList
    )
    // item 3045
    return {
        commands : commandList,
        nextId : id
    }
}

function ME__p_mdv03() {
    var commandList, edges, id, lowerJ, midJ, nodes, upperJ
    // item 3113
    trace("mdv03", this.itemId())
    // item 3108
    commandList = []
    nodes = {}
    edges = {}
    // item 3109
    midJ = goLeftToEnd(this.graph(), this.item())
    upperJ = up(this.graph(), midJ)
    lowerJ = down(this.graph(), midJ)
    // item 3112
    id = this.nextId()
    // item 3117
    nodes[midJ.id] = true
    edges[midJ.up] = true
    edges[midJ.right] = true
    edges[midJ.down] = true
    // item 3110
    this.graph().enumerateManhattan(
        this.item().id,
        nodes,
        edges
    )
    // item 3111
    deleteSubgraph(
        nodes,
        edges,
        commandList
    )
    // item 3122
    pushInsertVertical(
        commandList,
        id,
        upperJ.id,
        lowerJ.id,
        "arm"
    )
    // item 3123
    id++
    // item 3118
    return {
        commands : commandList,
        nextId : id
    }
}

function ME__p_mih01() {
    var bottom, box, commandList, dx, dy, id, leftBoundary, mid, movedNodes, newChild, newSubtree, pgraph, rightBoundary
    // item 2669
    trace("mih01", this.itemId())
    // item 2667
    commandList = []
    movedNodes = {}
    // item 2666
    pgraph = createPhysicalGraph(
        this.items(),
        this.graph(),
        this.render()
    )
    // item 3678
    newSubtree = this.newHorTree()
    id = newSubtree.nextId
    // item 2676
    newChild = newSubtree.node
    box = newSubtree.box
    // item 2679
    mid = this.item().y + this.item().h + Config.METRE
    // item 2675
    bottom = mid + box.bottom
    // item 2674
    rayDown(
        pgraph,
        movedNodes,
        this.item(),
        bottom
    )
    // item 2677
    rightBoundary = this.item().x + box.right -
      newChild.x
    // item 2678
    leftBoundary = this.item().x - newChild.x
    // item 2673
    swipe(
        pgraph,
        movedNodes,
        this.item().x,
        mid,
        bottom,
        rightBoundary
    )
    // item 2680
    swipe(
        pgraph,
        movedNodes,
        this.item().x,
        mid,
        bottom,
        leftBoundary
    )
    // item 2685
    dx = this.item().x - newChild.x
    dy = mid
    // item 2684
    positionSubtree(
        newSubtree,
        dx,
        dy
    )
    // item 4017
    pushSubtree(
        commandList,
        newSubtree
    )
    // item 2687
    pushInsertVertical(
        commandList,
        id,
        this.item().id,
        newChild.id,
        null
    )
    // item 2688
    id++
    // item 2668
    return buildEditResult(
        pgraph,
        movedNodes,
        commandList,
        id
    )
}

function ME__p_mih02() {
    var aboveY, commandList, distance, dummy, dx, dy, graph, id, leftCorner, middle, mj, movedNodes, newChild, newSubtree, oldSubtree, parent, parentBottom, pgraph, rightCorner, sibling, siblingTop
    // item 2723
    trace("mih02", this.itemId())
    // item 2720
    commandList = []
    movedNodes = {}
    // item 2712
    pgraph = createPhysicalGraph(
        this.items(),
        this.graph(),
        this.render()
    )
    // item 2724
    graph = pgraph.graph
    // item 2706
    parent = graph.getNode(this.itemId())
    sibling = down(graph, parent)
    // item 2715
    oldSubtree = makeSubtree(
        graph,
        sibling
    )
    // item 2728
    parentBottom = parent.y + parent.h
    siblingTop = sibling.y - sibling.h
    distance = siblingTop - parentBottom -
      Config.METRE * 2
    // item 2729
    if (distance < 0) {
        // item 2732
        pgraph.moveDown(
            sibling.id,
            -distance,
            movedNodes
        )
    }
    // item 2733
    aboveY = sibling.y - sibling.h -
      Config.METRE
    // item 2734
    dy = aboveY + Config.METRE
    dx = oldSubtree.box.right + Config.METRE
    // item 2735
    deleteEdge(
        pgraph,
        commandList,
        sibling.up
    )
    // item 3965
    newSubtree = this.newHorTree()
    id = newSubtree.nextId
    // item 2718
    newChild = newSubtree.node
    // item 2745
    leftCorner = makeDummyJunction(id, sibling.x, aboveY)
    id++
    // item 2751
    pgraph.graph.addItem(leftCorner)
    // item 2752
    dummy = makeDummyLine(
        id,
        true,
        leftCorner.id,
        sibling.id,
        null
    )
    // item 2753
    id++
    // item 2757
    pgraph.graph.addItem(dummy)
    // item 2758
    pgraph = createPhysicalGraph(
        this.items(),
        graph,
        this.render()
    )
    // item 2719
    cleanSpaceHor(
        pgraph,
        oldSubtree,
        newSubtree.box,
        false,
        movedNodes
    )
    // item 2739
    positionSubtree(
        newSubtree,
        dx,
        dy
    )
    // item 2744
    middle = getMiddle(
        sibling,
        newChild
    )
    // item 2743
    moveHorTo(
        pgraph,
        parent,
        middle,
        movedNodes
    )
    // item 2764
    parent = pgraph.graph.getNode(parent.id)
    // item 2762
    mj = makeDummyJunction(id, parent.x, aboveY)
    id++
    // item 2763
    rightCorner = makeDummyJunction(id, newChild.x, aboveY)
    id++
    // item 4018
    pushSubtree(
        commandList,
        newSubtree
    )
    // item 2746
    pushInsertNode(commandList, leftCorner)
    pushInsertNode(commandList, mj)
    pushInsertNode(commandList, rightCorner)
    // item 2760
    pushInsertVertical(commandList, id, leftCorner.id, sibling.id, null)
    id++
    // item 2759
    pushInsertVertical(commandList, id, rightCorner.id, newChild.id, null)
    id++
    // item 2761
    pushInsertVertical(commandList, id, parent.id, mj.id, null)
    id++
    // item 2711
    pushInsertHorizontal(commandList, id, leftCorner.id, mj.id,    "bridge")
    id++
    // item 2747
    pushInsertHorizontal(commandList, id, mj.id, rightCorner.id, "bridge")
    id++
    // item 2722
    return buildEditResult(
        pgraph,
        movedNodes,
        commandList,
        id
    )
}

function ME__p_mih03() {
    var commandList, id, movedNodes, newChild, newCorner, newSubtree, oldSubtree, pgraph, sibling
    // item 2195
    trace("mih03", this.itemId())
    // item 2192
    commandList = []
    movedNodes = {}
    // item 2183
    pgraph = createPhysicalGraph(
        this.items(),
        this.graph(),
        this.render()
    )
    // item 2169
    sibling = down(
        this.graph(),
        this.rightCorner()
    )
    // item 2186
    oldSubtree = makeSubtree(
        this.graph(),
        sibling
    )
    // item 3966
    newSubtree = this.newHorTree()
    id = newSubtree.nextId
    // item 2189
    newChild = newSubtree.node
    // item 2190
    cleanSpaceHor(
        pgraph,
        oldSubtree,
        newSubtree.box,
        false,
        movedNodes
    )
    // item 2191
    positionHorChild(
        this.graph(),
        oldSubtree,
        newSubtree
    )
    // item 2171
    newCorner = makeDummyJunction(
        id,
        newChild.x,
        this.rightCorner().y
    )
    // item 2179
    id++
    // item 4019
    pushSubtree(
        commandList,
        newSubtree
    )
    // item 2176
    pushInsertNode(
        commandList,
        newCorner
    )
    // item 2177
    pushInsertHorizontal(
        commandList,
        id,
        this.rightCorner().id,
        newCorner.id,
        "bridge"
    )
    // item 2180
    id++
    // item 2178
    pushInsertVertical(
        commandList,
        id,
        newCorner.id,
        newChild.id,
        null
    )
    // item 2181
    id++
    // item 2182
    id = recenterRight(
        pgraph,
        movedNodes,
        this.item().id,
        commandList,
        id
    )
    // item 2194
    return buildEditResult(
        pgraph,
        movedNodes,
        commandList,
        id
    )
}

function ME__p_mih04() {
    var aboveY, commandList, distance, dummy, dx, dy, graph, id, leftCorner, middle, mj, movedNodes, newChild, newSubtree, oldSubtree, parent, parentBottom, pgraph, rightCorner, sibling, siblingTop
    // item 2828
    trace("mih04", this.itemId())
    // item 2825
    commandList = []
    movedNodes = {}
    // item 2817
    pgraph = createPhysicalGraph(
        this.items(),
        this.graph(),
        this.render()
    )
    // item 2829
    graph = pgraph.graph
    // item 2811
    parent = graph.getNode(this.itemId())
    sibling = down(graph, parent)
    // item 2820
    oldSubtree = makeSubtree(
        graph,
        sibling
    )
    // item 2833
    parentBottom = parent.y + parent.h
    siblingTop = sibling.y - sibling.h
    distance = siblingTop - parentBottom -
      Config.METRE * 2
    // item 2834
    if (distance < 0) {
        // item 2837
        pgraph.moveDown(
            sibling.id,
            -distance,
            movedNodes
        )
    }
    // item 2838
    aboveY = sibling.y - sibling.h -
      Config.METRE
    // item 2840
    deleteEdge(
        pgraph,
        commandList,
        sibling.up
    )
    // item 3967
    newSubtree = this.newHorTree()
    id = newSubtree.nextId
    // item 2823
    newChild = newSubtree.node
    // item 2839
    dy = aboveY + Config.METRE
    dx = oldSubtree.box.left - Config.METRE -
      newSubtree.box.right
    // item 2850
    rightCorner = makeDummyJunction(id, sibling.x, aboveY)
    id++
    // item 2856
    pgraph.graph.addItem(rightCorner)
    // item 2857
    dummy = makeDummyLine(
        id,
        true,
        rightCorner.id,
        sibling.id,
        null
    )
    // item 2858
    id++
    // item 2862
    pgraph.graph.addItem(dummy)
    // item 2863
    pgraph = createPhysicalGraph(
        this.items(),
        graph,
        this.render()
    )
    // item 2824
    cleanSpaceHorLeft(
        pgraph,
        oldSubtree,
        newSubtree.box,
        movedNodes
    )
    // item 2844
    positionSubtree(
        newSubtree,
        dx,
        dy
    )
    // item 2849
    middle = getMiddle(
        sibling,
        newChild
    )
    // item 2848
    moveHorTo(
        pgraph,
        parent,
        middle,
        movedNodes
    )
    // item 2869
    parent = pgraph.graph.getNode(parent.id)
    // item 2867
    mj = makeDummyJunction(id, parent.x, aboveY)
    id++
    // item 2868
    leftCorner = makeDummyJunction(id, newChild.x, aboveY)
    id++
    // item 4020
    pushSubtree(
        commandList,
        newSubtree
    )
    // item 2851
    pushInsertNode(commandList, leftCorner)
    pushInsertNode(commandList, mj)
    pushInsertNode(commandList, rightCorner)
    // item 2865
    pushInsertVertical(commandList, id, rightCorner.id, sibling.id, null)
    id++
    // item 2864
    pushInsertVertical(commandList, id, leftCorner.id, newChild.id, null)
    id++
    // item 2866
    pushInsertVertical(commandList, id, parent.id, mj.id, null)
    id++
    // item 2816
    pushInsertHorizontal(commandList, id, leftCorner.id, mj.id,    "bridge")
    id++
    // item 2852
    pushInsertHorizontal(commandList, id, mj.id, rightCorner.id, "bridge")
    id++
    // item 2827
    return buildEditResult(
        pgraph,
        movedNodes,
        commandList,
        id
    )
}

function ME__p_mih05() {
    var commandList, id, movedNodes, newChild, newCorner, newSubtree, oldSubtree, pgraph, sibling
    // item 2275
    trace("mih05", this.itemId())
    // item 2263
    commandList = []
    movedNodes = {}
    // item 2262
    pgraph = createPhysicalGraph(
        this.items(),
        this.graph(),
        this.render()
    )
    // item 2252
    sibling = down(
        this.graph(),
        this.leftCorner()
    )
    // item 2264
    oldSubtree = makeSubtree(
        this.graph(),
        sibling
    )
    // item 3968
    newSubtree = this.newHorTree()
    id = newSubtree.nextId
    // item 2272
    newChild = newSubtree.node
    // item 2273
    cleanSpaceHorLeft(
        pgraph,
        oldSubtree,
        newSubtree.box,
        movedNodes
    )
    // item 2274
    positionHorChildLeft(
        this.graph(),
        oldSubtree,
        newSubtree
    )
    // item 2268
    newCorner = makeDummyJunction(
        id,
        newChild.x,
        this.leftCorner().y
    )
    // item 2269
    id++
    // item 4021
    pushSubtree(
        commandList,
        newSubtree
    )
    // item 2257
    pushInsertNode(
        commandList,
        newCorner
    )
    // item 2258
    pushInsertHorizontal(
        commandList,
        id,
        newCorner.id,
        this.leftCorner().id,
        "bridge"
    )
    // item 2260
    id++
    // item 2259
    pushInsertVertical(
        commandList,
        id,
        newCorner.id,
        newChild.id,
        null
    )
    // item 2261
    id++
    // item 2266
    id = recenterLeft(
        pgraph,
        movedNodes,
        this.item().id,
        commandList,
        id
    )
    // item 2267
    return buildEditResult(
        pgraph,
        movedNodes,
        commandList,
        id
    )
}

function ME__p_mih06() {
    var above, rightAbove
    // item 2291
    trace("mih06", this.itemId())
    // item 2279
    above = up(this.graph(), this.item())
    rightAbove = right(this.graph(), above)
    // item 2284
    if (above.up) {
        // item 2282
        return this.mih063()
    } else {
        // item 2283
        if (rightAbove.up) {
            // item 2280
            if (rightAbove.down) {
                // item 2288
                return this.mih062()
            } else {
                // item 2287
                return this.mih061()
            }
        } else {
            // item 2290
            return this.mih064()
        }
    }
}

function ME__p_mih061() {
    var above, commandList, id, movedNodes, newChild, newSubtree, parent, pgraph, tJoint
    // item 2326
    trace("mih061", this.itemId())
    // item 2306
    commandList = []
    movedNodes = {}
    // item 2307
    pgraph = createPhysicalGraph(
        this.items(),
        this.graph(),
        this.render()
    )
    // item 3969
    newSubtree = this.newHorTree()
    id = newSubtree.nextId
    // item 2324
    newChild = newSubtree.node
    // item 2304
    cleanSpaceHor(
        pgraph,
        this.oldSubtree(),
        newSubtree.box,
        true,
        movedNodes
    )
    // item 2325
    positionHorChild(
        this.graph(),
        this.oldSubtree(),
        newSubtree
    )
    // item 2316
    above = up(
        this.graph(),
        this.item()
    )
    // item 2315
    parent = getHorParent(
        this.graph(),
        above.id
    )
    // item 2317
    tJoint = down(
        this.graph(),
        parent
    )
    // item 2322
    moveHorTo(
        pgraph,
        tJoint,
        newChild.x,
        movedNodes
    )
    // item 4022
    pushSubtree(
        commandList,
        newSubtree
    )
    // item 2319
    pushInsertVertical(
        commandList,
        id,
        tJoint.id,
        newChild.id,
        null
    )
    // item 2320
    id++
    // item 2321
    return buildEditResult(
        pgraph,
        movedNodes,
        commandList,
        id
    )
}

function ME__p_mih062() {
    var above, commandList, graph, id, m1, m2, movedNodes, newChild, newSubtree, parent, pgraph, rightAbove, targetX
    // item 2389
    trace("mih062", this.itemId())
    // item 2350
    commandList = []
    movedNodes = {}
    // item 2351
    pgraph = createPhysicalGraph(
        this.items(),
        this.graph(),
        this.render()
    )
    // item 3970
    newSubtree = this.newHorTree()
    id = newSubtree.nextId
    // item 2356
    graph = pgraph.graph
    newChild = newSubtree.node
    above = up(graph, this.item())
    rightAbove = right(graph, above)
    parent = up(graph, rightAbove)
    // item 2354
    cleanSpaceHor(
        pgraph,
        this.oldSubtree(),
        newSubtree.box,
        true,
        movedNodes
    )
    // item 2355
    positionHorChild(
        graph,
        this.oldSubtree(),
        newSubtree
    )
    // item 2360
    deleteEdge(
        pgraph,
        commandList,
        rightAbove.up
    )
    // item 2361
    deleteEdge(
        pgraph,
        commandList,
        above.right
    )
    // item 2362
    pgraph.rebuildCache()
    // item 2363
    targetX = getMiddle(newChild, parent)
    // item 2364
    moveHorTo(
        pgraph,
        parent,
        targetX,
        movedNodes
    )
    // item 2368
    m1 = makeDummyJunction(
        id,
        newChild.x,
        above.y
    )
    // item 2369
    id++
    // item 2370
    m2 = makeDummyJunction(
        id,
        parent.x,
        above.y
    )
    // item 2371
    id++
    // item 4023
    pushSubtree(
        commandList,
        newSubtree
    )
    // item 2375
    pushInsertNode(
        commandList,
        m1
    )
    // item 2376
    pushInsertNode(
        commandList,
        m2
    )
    // item 2348
    id++
    // item 2347
    pushInsertVertical(
        commandList,
        id,
        parent.id,
        m2.id,
        null
    )
    // item 2377
    id++
    // item 2378
    pushInsertVertical(
        commandList,
        id,
        m1.id,
        newChild.id,
        null
    )
    // item 2379
    id++
    // item 2380
    pushInsertHorizontal(
        commandList,
        id,
        above.id,
        m1.id,
        "bridge"
    )
    // item 2384
    id++
    // item 2385
    pushInsertHorizontal(
        commandList,
        id,
        m1.id,
        m2.id,
        "bridge"
    )
    // item 2386
    id++
    // item 2387
    pushInsertHorizontal(
        commandList,
        id,
        m2.id,
        rightAbove.id,
        "bridge"
    )
    // item 2388
    id++
    // item 2339
    return buildEditResult(
        pgraph,
        movedNodes,
        commandList,
        id
    )
}

function ME__p_mih063() {
    var above, commandList, graph, id, m1, m2, movedNodes, newChild, newSubtree, parent, pgraph, rightAbove, targetX
    // item 2559
    trace("mih063", this.itemId())
    // item 2520
    commandList = []
    movedNodes = {}
    // item 2521
    pgraph = createPhysicalGraph(
        this.items(),
        this.graph(),
        this.render()
    )
    // item 3971
    newSubtree = this.newHorTree()
    id = newSubtree.nextId
    // item 2526
    graph = pgraph.graph
    newChild = newSubtree.node
    above = up(graph, this.item())
    rightAbove = right(graph, above)
    parent = up(graph, above)
    // item 2524
    cleanSpaceHor(
        pgraph,
        this.oldSubtree(),
        newSubtree.box,
        true,
        movedNodes
    )
    // item 2525
    positionHorChild(
        graph,
        this.oldSubtree(),
        newSubtree
    )
    // item 2530
    deleteEdge(
        pgraph,
        commandList,
        above.up
    )
    // item 2531
    deleteEdge(
        pgraph,
        commandList,
        above.right
    )
    // item 2532
    pgraph.rebuildCache()
    // item 2533
    targetX = getMiddle(newChild, parent)
    // item 2534
    moveHorTo(
        pgraph,
        parent,
        targetX,
        movedNodes
    )
    // item 2538
    m1 = makeDummyJunction(
        id,
        parent.x,
        above.y
    )
    // item 2539
    id++
    // item 2540
    m2 = makeDummyJunction(
        id,
        newChild.x,
        above.y
    )
    // item 2541
    id++
    // item 4024
    pushSubtree(
        commandList,
        newSubtree
    )
    // item 2545
    pushInsertNode(
        commandList,
        m1
    )
    // item 2546
    pushInsertNode(
        commandList,
        m2
    )
    // item 2518
    pushInsertVertical(
        commandList,
        id,
        parent.id,
        m1.id,
        null
    )
    // item 2547
    id++
    // item 2548
    pushInsertVertical(
        commandList,
        id,
        m2.id,
        newChild.id,
        null
    )
    // item 2549
    id++
    // item 2550
    pushInsertHorizontal(
        commandList,
        id,
        above.id,
        m1.id,
        "bridge"
    )
    // item 2554
    id++
    // item 2555
    pushInsertHorizontal(
        commandList,
        id,
        m1.id,
        m2.id,
        "bridge"
    )
    // item 2556
    id++
    // item 2557
    pushInsertHorizontal(
        commandList,
        id,
        m2.id,
        rightAbove.id,
        "bridge"
    )
    // item 2558
    id++
    // item 2510
    return buildEditResult(
        pgraph,
        movedNodes,
        commandList,
        id
    )
}

function ME__p_mih064() {
    var above, commandList, graph, id, m1, movedNodes, newChild, newSubtree, parent, pgraph, rightAbove
    // item 2608
    trace("mih064", this.itemId())
    // item 2581
    commandList = []
    movedNodes = {}
    // item 2582
    pgraph = createPhysicalGraph(
        this.items(),
        this.graph(),
        this.render()
    )
    // item 3972
    newSubtree = this.newHorTree()
    id = newSubtree.nextId
    // item 2587
    graph = pgraph.graph
    newChild = newSubtree.node
    above = up(graph, this.item())
    rightAbove = right(graph, above)
    // item 2585
    cleanSpaceHor(
        pgraph,
        this.oldSubtree(),
        newSubtree.box,
        true,
        movedNodes
    )
    // item 2586
    positionHorChild(
        graph,
        this.oldSubtree(),
        newSubtree
    )
    // item 2613
    parent = getHorParent(
        graph,
        above.id
    )
    // item 2591
    deleteEdge(
        pgraph,
        commandList,
        above.right
    )
    // item 2592
    pgraph.rebuildCache()
    // item 2610
    if (parent.x > above.x) {
        // item 2614
        id = recenterLeft(
            pgraph,
            movedNodes,
            parent.id,
            commandList,
            id
        )
    } else {
        // item 2609
        id = recenterRight(
            pgraph,
            movedNodes,
            parent.id,
            commandList,
            id
        )
    }
    // item 2596
    m1 = makeDummyJunction(
        id,
        newChild.x,
        above.y
    )
    // item 2597
    id++
    // item 4025
    pushSubtree(
        commandList,
        newSubtree
    )
    // item 2601
    pushInsertNode(
        commandList,
        m1
    )
    // item 2602
    pushInsertVertical(
        commandList,
        id,
        m1.id,
        newChild.id,
        null
    )
    // item 2603
    id++
    // item 2606
    pushInsertHorizontal(
        commandList,
        id,
        above.id,
        m1.id,
        "bridge"
    )
    // item 2605
    id++
    // item 2604
    pushInsertHorizontal(
        commandList,
        id,
        m1.id,
        rightAbove.id,
        "bridge"
    )
    // item 2607
    id++
    // item 2572
    return buildEditResult(
        pgraph,
        movedNodes,
        commandList,
        id
    )
}

function ME__p_miv01() {
    var armX, begin, bottom, box, commandList, graph, id, itemY, leftBoundary, leftMost, lowerJ, mid, movedNodes, newChild, newSubtree, pgraph, rightBoundary, top, upperJ
    // item 2922
    trace("miv01", this.itemId())
    // item 2920
    commandList = []
    movedNodes = {}
    // item 2919
    pgraph = createPhysicalGraph(
        this.items(),
        this.graph(),
        this.render()
    )
    // item 2923
    graph = pgraph.graph
    // item 3975
    newSubtree = this.newVerTree()
    id = newSubtree.nextId
    // item 2929
    newChild = newSubtree.node
    box = newSubtree.box
    // item 4495
    itemY = accountForLowestAbove(
        pgraph,
        movedNodes,
        this.itemId()
    )
    // item 2930
    top = itemY + this.item().h
    armX = this.item().x - this.item().w + Config.METRE
    leftBoundary = armX + Config.METRE
    // item 2928
    mid = top + Config.METRE
    bottom = mid + box.bottom
    rightBoundary = leftBoundary + box.right
    // item 2936
    begin = new Utils.Point(
        armX,
        top
    )
    // item 2927
    rayRight(
        pgraph,
        movedNodes,
        begin,
        this.itemId(),
        rightBoundary
    )
    // item 2926
    swipeDown(
        pgraph,
        movedNodes,
        armX,
        top,
        rightBoundary,
        bottom
    )
    // item 2934
    positionSubtree(
        newSubtree,
        leftBoundary,
        mid
    )
    // item 4026
    pushSubtree(
        commandList,
        newSubtree
    )
    // item 2937
    lowerJ = makeDummyJunction(
        id,
        armX,
        newChild.y
    )
    // item 2938
    id++
    // item 2941
    pushInsertNode(
        commandList,
        lowerJ
    )
    // item 2939
    pushInsertHorizontal(
        commandList,
        id,
        lowerJ.id,
        newSubtree.dockId,
        null
    )
    // item 2940
    id++
    // item 2945
    upperJ = makeDummyJunction(
        id,
        armX,
        itemY
    )
    // item 2946
    id++
    // item 2947
    if (this.item().left) {
        // item 2950
        leftMost = left(this.graph(), this.item())
        // item 2951
        pushDeleteEdge(
            commandList,
            this.item().left
        )
        // item 2953
        pushInsertNode(
            commandList,
            upperJ
        )
        // item 2954
        pushInsertHorizontal(
            commandList,
            id,
            leftMost.id,
            upperJ.id,
            null
        )
        // item 2955
        id++
    } else {
        // item 2952
        pushInsertNode(
            commandList,
            upperJ
        )
    }
    // item 2956
    pushInsertHorizontal(
        commandList,
        id,
        upperJ.id,
        this.item().id,
        "link"
    )
    // item 2957
    id++
    // item 2958
    pushInsertVertical(
        commandList,
        id,
        upperJ.id,
        lowerJ.id,
        "arm"
    )
    // item 2959
    id++
    // item 2921
    return buildEditResult(
        pgraph,
        movedNodes,
        commandList,
        id
    )
}

function ME__p_miv02() {
    var armX, bottom, box, commandList, graph, id, item, itemY, leftBoundary, lowerJ, mid, movedNodes, newChild, newSubtree, oldBox, pgraph, rightBoundary, top, upperJ
    // item 3003
    trace("miv02", this.itemId())
    // item 3001
    commandList = []
    movedNodes = {}
    // item 3000
    pgraph = createPhysicalGraph(
        this.items(),
        this.graph(),
        this.render()
    )
    // item 3004
    graph = pgraph.graph
    // item 4498
    item = graph.getNode(
        this.itemId()
    )
    // item 3974
    newSubtree = this.newVerTree()
    id = newSubtree.nextId
    // item 3009
    newChild = newSubtree.node
    box = newSubtree.box
    // item 4496
    itemY = accountForLowestAbove(
        pgraph,
        movedNodes,
        this.itemId()
    )
    // item 4497
    oldBox = measureSubtree(
        graph,
        item
    )
    // item 3021
    upperJ = goLeftToEnd(graph, item)
    // item 3010
    top = oldBox.bottom
    armX = upperJ.x
    leftBoundary = armX + Config.METRE
    // item 3008
    mid = top + Config.METRE
    bottom = mid + box.bottom
    rightBoundary = leftBoundary + box.right
    // item 3007
    rayDown(
        pgraph,
        movedNodes,
        upperJ,
        bottom
    )
    // item 3022
    swipe(
        pgraph,
        movedNodes,
        armX,
        mid,
        bottom,
        rightBoundary
    )
    // item 3014
    positionSubtree(
        newSubtree,
        leftBoundary,
        mid
    )
    // item 4027
    pushSubtree(
        commandList,
        newSubtree
    )
    // item 3016
    lowerJ = makeDummyJunction(
        id,
        armX,
        newChild.y
    )
    // item 3017
    id++
    // item 3020
    pushInsertNode(
        commandList,
        lowerJ
    )
    // item 3018
    pushInsertHorizontal(
        commandList,
        id,
        lowerJ.id,
        newSubtree.dockId,
        null
    )
    // item 3019
    id++
    // item 3023
    pushInsertVertical(
        commandList,
        id,
        upperJ.id,
        lowerJ.id,
        "arm"
    )
    // item 3024
    id++
    // item 3002
    return buildEditResult(
        pgraph,
        movedNodes,
        commandList,
        id
    )
}

function ME__p_miv03() {
    var armX, bottom, box, ceiling, commandList, distance, graph, id, item, leftBoundary, lowerJ, lowerTop, mid, midJ, movedNodes, newChild, newSubtree, pgraph, rightBoundary, upperEdge, upperJ, upperSibling
    // item 3061
    trace("miv03", this.itemId())
    // item 3059
    commandList = []
    movedNodes = {}
    // item 3058
    pgraph = createPhysicalGraph(
        this.items(),
        this.graph(),
        this.render()
    )
    // item 3062
    graph = pgraph.graph
    // item 3976
    newSubtree = this.newVerTree()
    id = newSubtree.nextId
    // item 3066
    newChild = newSubtree.node
    box = newSubtree.box
    // item 3084
    item = graph.getNode(this.itemId())
    lowerJ = goLeftToEnd(graph, item)
    upperJ = up(graph, lowerJ)
    upperSibling = goRightToEnd(graph, upperJ)
    upperEdge = graph.getEdge(upperJ.right)
    // item 4505
    ceiling = findLowestEdgeAbove(
        graph,
        item
    )
    // item 3067
    mid = ceiling + Config.METRE
    armX = lowerJ.x
    leftBoundary = armX + Config.METRE
    // item 3065
    bottom = mid + box.bottom
    rightBoundary = leftBoundary + box.right
    // item 3090
    lowerTop = topBorder(item) - Config.METRE
    distance = lowerTop - bottom
    // item 3091
    if (distance < 0) {
        // item 3094
        pgraph.moveDown(
            item.id,
            -distance,
            movedNodes
        )
    }
    // item 3097
    swipe(
        pgraph,
        movedNodes,
        armX,
        mid,
        bottom,
        rightBoundary
    )
    // item 3096
    pgraph.rebuildCache()
    // item 3095
    deleteEdge(
        pgraph,
        commandList,
        lowerJ.up
    )
    // item 3071
    positionSubtree(
        newSubtree,
        leftBoundary,
        mid
    )
    // item 4028
    pushSubtree(
        commandList,
        newSubtree
    )
    // item 3073
    midJ = makeDummyJunction(
        id,
        armX,
        newChild.y
    )
    // item 3074
    id++
    // item 3077
    pushInsertNode(
        commandList,
        midJ
    )
    // item 3075
    pushInsertHorizontal(
        commandList,
        id,
        midJ.id,
        newSubtree.dockId,
        null
    )
    // item 3076
    id++
    // item 3098
    pushInsertVertical(
        commandList,
        id,
        upperJ.id,
        midJ.id,
        "arm"
    )
    // item 3081
    id++
    // item 3082
    pushInsertVertical(
        commandList,
        id,
        midJ.id,
        lowerJ.id,
        "arm"
    )
    // item 3083
    id++
    // item 3060
    return buildEditResult(
        pgraph,
        movedNodes,
        commandList,
        id
    )
}

function ME__p_miv04() {
    var armX, box, commandList, id, leftBoundary, lowerJ, mid, movedNodes, newChild, newSubtree, top, upperJ
    // item 3135
    trace("miv04", this.itemId())
    // item 3134
    commandList = []
    movedNodes = {}
    // item 3977
    newSubtree = this.newVerTree()
    id = newSubtree.nextId
    // item 3139
    newChild = newSubtree.node
    box = newSubtree.box
    // item 3140
    top = this.item().y + this.item().h
    armX = this.item().x - this.item().w - Config.METRE
    leftBoundary = armX + Config.METRE
    mid = top + Config.METRE
    // item 3144
    positionSubtree(
        newSubtree,
        leftBoundary,
        mid
    )
    // item 4029
    pushSubtree(
        commandList,
        newSubtree
    )
    // item 3146
    upperJ = makeDummyJunction(
        id,
        armX,
        this.item().y
    )
    // item 3147
    id++
    // item 3153
    lowerJ = makeDummyJunction(
        id,
        armX,
        newChild.y
    )
    // item 3154
    id++
    // item 3155
    pushInsertNode(
        commandList,
        upperJ
    )
    // item 3150
    pushInsertNode(
        commandList,
        lowerJ
    )
    // item 3148
    pushInsertHorizontal(
        commandList,
        id,
        lowerJ.id,
        newSubtree.dockId,
        null
    )
    // item 3149
    id++
    // item 3156
    pushInsertHorizontal(
        commandList,
        id,
        upperJ.id,
        this.itemId(),
        null
    )
    // item 3157
    id++
    // item 3158
    pushInsertVertical(
        commandList,
        id,
        upperJ.id,
        lowerJ.id,
        "arm"
    )
    // item 3159
    id++
    // item 3160
    return {
        commands : commandList,
        nextId : id
    }
}

function ME__p_newHorTree() {
    // item 3673
    return logicalToSubtree(
        this.toInsert(),
        "horizontal",
        this.nextId()
    )
}

function ME__p_newVerTree() {
    // item 3677
    return logicalToSubtree(
        this.toInsert(),
        "vertical",
        this.nextId()
    )
}

function ME__p_oldSubtree() {
    // item 3180
    return makeSubtree(
        this.graph(),
        this.item()
    )
}

function ME__p_rightCorner() {
    // item 3172
    return goRightToEnd(
        this.graph(),
        this.below()
    )
}

function ME__p_toggleTree() {
    var commandList, dummyId, dx, dy, edges, graph, head, headCopy, id, newHeadCommand, nodes, pasteResult, rootLink, subtree, task
    // item 4340
    trace("toggleTree", "")
    // item 4268
    head = findHead(
        this.graph()
    )
    // item 4269
    subtree = copySubtree(
        this.graph(),
        head.id
    )
    // item 4272
    nodes = Object.keys(
        subtree.nodes
    )
    // item 4273
    if (nodes.length == 1) {
        // item 4271
        return null
    } else {
        // item 4276
        rootLink = subtree.links[head.id]
        // item 4277
        if (rootLink.type == "horizontal") {
            // item 4280
            rootLink.type = "vertical"
        } else {
            // item 4281
            rootLink.type = "horizontal"
        }
        // item 4341
        commandList = []
        nodes = {}
        edges = {}
        // item 4342
        this.graph().enumerateManhattan(
            head.id,
            nodes,
            edges
        )
        // item 4343
        deleteSubgraph(
            nodes,
            edges,
            commandList
        )
        // item 4421
        dummyId = "xxx"
        // item 4348
        graph = new Utils.Manhattan()
        // item 4359
        headCopy = cloneNode(head, dummyId)
        // item 4349
        graph.addItem(headCopy)
        // item 4328
        task = cloneME(
            graph,
            this.render(),
            this.nextId(),
            this.items()
        )
        // item 4317
        task.itemId(dummyId)
        task.toInsert(subtree)
        // item 4318
        pasteResult = task.mih01()
        // item 4353
        commandList = commandList.concat(
            pasteResult.commands
        )
        // item 4354
        id = pasteResult.nextId
        // item 4391
        newHeadCommand = deleteOldHead(
            commandList,
            dummyId
        )
        // item 4399
        newHeadCommand.fields.role = "header"
        // item 4400
        if (rootLink.type == "vertical") {
            // item 4403
            newHeadCommand.fields.x += Config.METRE * 2
            // item 4430
            removeLinkRole(
                commandList,
                newHeadCommand.id
            )
        }
        // item 4404
        dx = newHeadCommand.fields.x - head.x
        dy = newHeadCommand.fields.y - head.y
        // item 4420
        moveAllNodes(
            commandList,
            -dx,
            -dy
        )
        // item 4356
        /*
        // item 4358
        id = this.nextId()
        // item 4357
        */
        // item 4355
        return {
            commands : commandList,
            nextId : id
        }
    }
}

function ME() {
    this._below = null
    this.below = function() {
        var value = this._below
        if (value != null) {
            return value
        }
        value = ME__p_below.call(this)
        this._below = value
        return value
    }
    this._graph = null
    this.graph = function(newValue) {
        if (typeof newValue != "undefined") {
            this._graph = newValue
            this._below = null
            this._item = null
            this._leftCorner = null
            this._mdh01 = null
            this._mdh02 = null
            this._mdh03 = null
            this._mdh04 = null
            this._mdh05 = null
            this._mdh06 = null
            this._mdh061 = null
            this._mdh062 = null
            this._mdh063 = null
            this._mdh064 = null
            this._mdv01 = null
            this._mdv02 = null
            this._mdv03 = null
            this._mih01 = null
            this._mih02 = null
            this._mih03 = null
            this._mih04 = null
            this._mih05 = null
            this._mih06 = null
            this._mih061 = null
            this._mih062 = null
            this._mih063 = null
            this._mih064 = null
            this._miv01 = null
            this._miv02 = null
            this._miv03 = null
            this._miv04 = null
            this._oldSubtree = null
            this._rightCorner = null
            this._toggleTree = null
            return
        }
        return this._graph
    }
    this._item = null
    this.item = function() {
        var value = this._item
        if (value != null) {
            return value
        }
        value = ME__p_item.call(this)
        this._item = value
        return value
    }
    this._itemId = null
    this.itemId = function(newValue) {
        if (typeof newValue != "undefined") {
            this._itemId = newValue
            this._below = null
            this._item = null
            this._leftCorner = null
            this._mdh01 = null
            this._mdh02 = null
            this._mdh03 = null
            this._mdh04 = null
            this._mdh05 = null
            this._mdh06 = null
            this._mdh061 = null
            this._mdh062 = null
            this._mdh063 = null
            this._mdh064 = null
            this._mdv01 = null
            this._mdv02 = null
            this._mdv03 = null
            this._mih01 = null
            this._mih02 = null
            this._mih03 = null
            this._mih04 = null
            this._mih05 = null
            this._mih06 = null
            this._mih061 = null
            this._mih062 = null
            this._mih063 = null
            this._mih064 = null
            this._miv01 = null
            this._miv02 = null
            this._miv03 = null
            this._miv04 = null
            this._oldSubtree = null
            this._rightCorner = null
            return
        }
        return this._itemId
    }
    this._items = null
    this.items = function(newValue) {
        if (typeof newValue != "undefined") {
            this._items = newValue
            this._mdh02 = null
            this._mdh03 = null
            this._mdh04 = null
            this._mdh05 = null
            this._mdh06 = null
            this._mdh062 = null
            this._mdh063 = null
            this._mdh064 = null
            this._mih01 = null
            this._mih02 = null
            this._mih03 = null
            this._mih04 = null
            this._mih05 = null
            this._mih06 = null
            this._mih061 = null
            this._mih062 = null
            this._mih063 = null
            this._mih064 = null
            this._miv01 = null
            this._miv02 = null
            this._miv03 = null
            this._toggleTree = null
            return
        }
        return this._items
    }
    this._leftCorner = null
    this.leftCorner = function() {
        var value = this._leftCorner
        if (value != null) {
            return value
        }
        value = ME__p_leftCorner.call(this)
        this._leftCorner = value
        return value
    }
    this._mdh01 = null
    this.mdh01 = function() {
        var value = this._mdh01
        if (value != null) {
            return value
        }
        value = ME__p_mdh01.call(this)
        this._mdh01 = value
        return value
    }
    this._mdh02 = null
    this.mdh02 = function() {
        var value = this._mdh02
        if (value != null) {
            return value
        }
        value = ME__p_mdh02.call(this)
        this._mdh02 = value
        return value
    }
    this._mdh03 = null
    this.mdh03 = function() {
        var value = this._mdh03
        if (value != null) {
            return value
        }
        value = ME__p_mdh03.call(this)
        this._mdh03 = value
        return value
    }
    this._mdh04 = null
    this.mdh04 = function() {
        var value = this._mdh04
        if (value != null) {
            return value
        }
        value = ME__p_mdh04.call(this)
        this._mdh04 = value
        return value
    }
    this._mdh05 = null
    this.mdh05 = function() {
        var value = this._mdh05
        if (value != null) {
            return value
        }
        value = ME__p_mdh05.call(this)
        this._mdh05 = value
        return value
    }
    this._mdh06 = null
    this.mdh06 = function() {
        var value = this._mdh06
        if (value != null) {
            return value
        }
        value = ME__p_mdh06.call(this)
        this._mdh06 = value
        return value
    }
    this._mdh061 = null
    this.mdh061 = function() {
        var value = this._mdh061
        if (value != null) {
            return value
        }
        value = ME__p_mdh061.call(this)
        this._mdh061 = value
        return value
    }
    this._mdh062 = null
    this.mdh062 = function() {
        var value = this._mdh062
        if (value != null) {
            return value
        }
        value = ME__p_mdh062.call(this)
        this._mdh062 = value
        return value
    }
    this._mdh063 = null
    this.mdh063 = function() {
        var value = this._mdh063
        if (value != null) {
            return value
        }
        value = ME__p_mdh063.call(this)
        this._mdh063 = value
        return value
    }
    this._mdh064 = null
    this.mdh064 = function() {
        var value = this._mdh064
        if (value != null) {
            return value
        }
        value = ME__p_mdh064.call(this)
        this._mdh064 = value
        return value
    }
    this._mdv01 = null
    this.mdv01 = function() {
        var value = this._mdv01
        if (value != null) {
            return value
        }
        value = ME__p_mdv01.call(this)
        this._mdv01 = value
        return value
    }
    this._mdv02 = null
    this.mdv02 = function() {
        var value = this._mdv02
        if (value != null) {
            return value
        }
        value = ME__p_mdv02.call(this)
        this._mdv02 = value
        return value
    }
    this._mdv03 = null
    this.mdv03 = function() {
        var value = this._mdv03
        if (value != null) {
            return value
        }
        value = ME__p_mdv03.call(this)
        this._mdv03 = value
        return value
    }
    this._mih01 = null
    this.mih01 = function() {
        var value = this._mih01
        if (value != null) {
            return value
        }
        value = ME__p_mih01.call(this)
        this._mih01 = value
        return value
    }
    this._mih02 = null
    this.mih02 = function() {
        var value = this._mih02
        if (value != null) {
            return value
        }
        value = ME__p_mih02.call(this)
        this._mih02 = value
        return value
    }
    this._mih03 = null
    this.mih03 = function() {
        var value = this._mih03
        if (value != null) {
            return value
        }
        value = ME__p_mih03.call(this)
        this._mih03 = value
        return value
    }
    this._mih04 = null
    this.mih04 = function() {
        var value = this._mih04
        if (value != null) {
            return value
        }
        value = ME__p_mih04.call(this)
        this._mih04 = value
        return value
    }
    this._mih05 = null
    this.mih05 = function() {
        var value = this._mih05
        if (value != null) {
            return value
        }
        value = ME__p_mih05.call(this)
        this._mih05 = value
        return value
    }
    this._mih06 = null
    this.mih06 = function() {
        var value = this._mih06
        if (value != null) {
            return value
        }
        value = ME__p_mih06.call(this)
        this._mih06 = value
        return value
    }
    this._mih061 = null
    this.mih061 = function() {
        var value = this._mih061
        if (value != null) {
            return value
        }
        value = ME__p_mih061.call(this)
        this._mih061 = value
        return value
    }
    this._mih062 = null
    this.mih062 = function() {
        var value = this._mih062
        if (value != null) {
            return value
        }
        value = ME__p_mih062.call(this)
        this._mih062 = value
        return value
    }
    this._mih063 = null
    this.mih063 = function() {
        var value = this._mih063
        if (value != null) {
            return value
        }
        value = ME__p_mih063.call(this)
        this._mih063 = value
        return value
    }
    this._mih064 = null
    this.mih064 = function() {
        var value = this._mih064
        if (value != null) {
            return value
        }
        value = ME__p_mih064.call(this)
        this._mih064 = value
        return value
    }
    this._miv01 = null
    this.miv01 = function() {
        var value = this._miv01
        if (value != null) {
            return value
        }
        value = ME__p_miv01.call(this)
        this._miv01 = value
        return value
    }
    this._miv02 = null
    this.miv02 = function() {
        var value = this._miv02
        if (value != null) {
            return value
        }
        value = ME__p_miv02.call(this)
        this._miv02 = value
        return value
    }
    this._miv03 = null
    this.miv03 = function() {
        var value = this._miv03
        if (value != null) {
            return value
        }
        value = ME__p_miv03.call(this)
        this._miv03 = value
        return value
    }
    this._miv04 = null
    this.miv04 = function() {
        var value = this._miv04
        if (value != null) {
            return value
        }
        value = ME__p_miv04.call(this)
        this._miv04 = value
        return value
    }
    this._newHorTree = null
    this.newHorTree = function() {
        var value = this._newHorTree
        if (value != null) {
            return value
        }
        value = ME__p_newHorTree.call(this)
        this._newHorTree = value
        return value
    }
    this._newVerTree = null
    this.newVerTree = function() {
        var value = this._newVerTree
        if (value != null) {
            return value
        }
        value = ME__p_newVerTree.call(this)
        this._newVerTree = value
        return value
    }
    this._nextId = null
    this.nextId = function(newValue) {
        if (typeof newValue != "undefined") {
            this._nextId = newValue
            this._mdh01 = null
            this._mdh02 = null
            this._mdh03 = null
            this._mdh04 = null
            this._mdh05 = null
            this._mdh06 = null
            this._mdh061 = null
            this._mdh062 = null
            this._mdh063 = null
            this._mdh064 = null
            this._mdv01 = null
            this._mdv02 = null
            this._mdv03 = null
            this._mih01 = null
            this._mih02 = null
            this._mih03 = null
            this._mih04 = null
            this._mih05 = null
            this._mih06 = null
            this._mih061 = null
            this._mih062 = null
            this._mih063 = null
            this._mih064 = null
            this._miv01 = null
            this._miv02 = null
            this._miv03 = null
            this._miv04 = null
            this._newHorTree = null
            this._newVerTree = null
            this._toggleTree = null
            return
        }
        return this._nextId
    }
    this._oldSubtree = null
    this.oldSubtree = function() {
        var value = this._oldSubtree
        if (value != null) {
            return value
        }
        value = ME__p_oldSubtree.call(this)
        this._oldSubtree = value
        return value
    }
    this._render = null
    this.render = function(newValue) {
        if (typeof newValue != "undefined") {
            this._render = newValue
            this._mdh02 = null
            this._mdh03 = null
            this._mdh04 = null
            this._mdh05 = null
            this._mdh06 = null
            this._mdh062 = null
            this._mdh063 = null
            this._mdh064 = null
            this._mih01 = null
            this._mih02 = null
            this._mih03 = null
            this._mih04 = null
            this._mih05 = null
            this._mih06 = null
            this._mih061 = null
            this._mih062 = null
            this._mih063 = null
            this._mih064 = null
            this._miv01 = null
            this._miv02 = null
            this._miv03 = null
            this._toggleTree = null
            return
        }
        return this._render
    }
    this._rightCorner = null
    this.rightCorner = function() {
        var value = this._rightCorner
        if (value != null) {
            return value
        }
        value = ME__p_rightCorner.call(this)
        this._rightCorner = value
        return value
    }
    this._toInsert = null
    this.toInsert = function(newValue) {
        if (typeof newValue != "undefined") {
            this._toInsert = newValue
            this._mih01 = null
            this._mih02 = null
            this._mih03 = null
            this._mih04 = null
            this._mih05 = null
            this._mih06 = null
            this._mih061 = null
            this._mih062 = null
            this._mih063 = null
            this._mih064 = null
            this._miv01 = null
            this._miv02 = null
            this._miv03 = null
            this._miv04 = null
            this._newHorTree = null
            this._newVerTree = null
            return
        }
        return this._toInsert
    }
    this._toggleTree = null
    this.toggleTree = function() {
        var value = this._toggleTree
        if (value != null) {
            return value
        }
        value = ME__p_toggleTree.call(this)
        this._toggleTree = value
        return value
    }
}


	self.ME = ME
	self.getHorParent = getHorParent
	self.setItemWidth = setItemWidth
	self.changeItem = changeItem
	self.getSoftExpanders = getSoftExpanders
	self.copySubtree = copySubtree
	self.mustFitSiblings = mustFitSiblings
	self.getDefaultIconType = getDefaultIconType

}

var Mind = new MindModule()
